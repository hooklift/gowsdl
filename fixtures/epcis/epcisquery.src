// Code generated by gowsdl DO NOT EDIT.

package netsuite

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type DeleteReturn struct {
	XMLName xml.Name `xml:"deleteReturn"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Document_AddRequest struct {
	/* Here */
	XMLName  xml.Name  `xml:"add"`
	XmlNSXSI string    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Document `xml:"record,omitempty" json:"record,omitempty"`
}

type Document_AddResponse struct {
	XMLName       xml.Name                `xml:"addResponse"`
	WriteResponse *Document_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Document_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Document_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Document_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name               `xml:"getResponse"`
	ReadResponse *Document_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Document_ReadResponse struct {
	XMLName xml.Name  `xml:"readResponse"`
	Status  *Status   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Document `xml:"record,omitempty" json:"record,omitempty"`
}

type EPC_AddRequest struct {
	/* Here */
	XMLName  xml.Name `xml:"add"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPC     `xml:"record,omitempty" json:"record,omitempty"`
}

type EPC_AddResponse struct {
	XMLName       xml.Name           `xml:"addResponse"`
	WriteResponse *EPC_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPC_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPC_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPC_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name          `xml:"getResponse"`
	ReadResponse *EPC_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPC_ReadResponse struct {
	XMLName xml.Name `xml:"readResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPC     `xml:"record,omitempty" json:"record,omitempty"`
}

type Document struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	//
	// The version of the schema corresponding to which the instance conforms.
	//

	SchemaVersion float64 `xml:"urn:epcglobal:xsd:1 schemaVersion,attr,omitempty" json:"schemaVersion,omitempty"`

	//
	// The date the message was created. Used for auditing and logging.
	//

	CreationDate soap.XSDDateTime `xml:"urn:epcglobal:xsd:1 creationDate,attr,omitempty" json:"creationDate,omitempty"`
}

type EPC string

func (service *netSuitePortType) Document_AddContext(ctx context.Context, request *Document_AddRequest) (*Document_AddResponse, error) {
	response := new(Document_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Document_Add(request *Document_AddRequest) (*Document_AddResponse, error) {
	return service.Document_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Document_GetContext(ctx context.Context, request *Document_GetRequest) (*Document_GetResponse, error) {
	response := new(Document_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Document_Get(request *Document_GetRequest) (*Document_GetResponse, error) {
	return service.Document_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPC_AddContext(ctx context.Context, request *EPC_AddRequest) (*EPC_AddResponse, error) {
	response := new(EPC_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPC_Add(request *EPC_AddRequest) (*EPC_AddResponse, error) {
	return service.EPC_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPC_GetContext(ctx context.Context, request *EPC_GetRequest) (*EPC_GetResponse, error) {
	response := new(EPC_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPC_Get(request *EPC_GetRequest) (*EPC_GetResponse, error) {
	return service.EPC_GetContext(
		context.Background(),
		request,
	)
}

type DocumentIdentification_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *DocumentIdentification `xml:"record,omitempty" json:"record,omitempty"`
}

type DocumentIdentification_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *DocumentIdentification_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type DocumentIdentification_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type DocumentIdentification_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type DocumentIdentification_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *DocumentIdentification_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type DocumentIdentification_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *DocumentIdentification `xml:"record,omitempty" json:"record,omitempty"`
}

type DocumentIdentification struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Standard string `xml:"Standard,omitempty" json:"Standard,omitempty"`

	TypeVersion string `xml:"TypeVersion,omitempty" json:"TypeVersion,omitempty"`

	InstanceIdentifier string `xml:"InstanceIdentifier,omitempty" json:"InstanceIdentifier,omitempty"`

	Type string `xml:"Type,omitempty" json:"Type,omitempty"`

	MultipleType bool `xml:"MultipleType,omitempty" json:"MultipleType,omitempty"`

	CreationDateAndTime soap.XSDDateTime `xml:"CreationDateAndTime,omitempty" json:"CreationDateAndTime,omitempty"`
}

func (service *netSuitePortType) DocumentIdentification_AddContext(ctx context.Context, request *DocumentIdentification_AddRequest) (*DocumentIdentification_AddResponse, error) {
	response := new(DocumentIdentification_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DocumentIdentification_Add(request *DocumentIdentification_AddRequest) (*DocumentIdentification_AddResponse, error) {
	return service.DocumentIdentification_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DocumentIdentification_GetContext(ctx context.Context, request *DocumentIdentification_GetRequest) (*DocumentIdentification_GetResponse, error) {
	response := new(DocumentIdentification_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DocumentIdentification_Get(request *DocumentIdentification_GetRequest) (*DocumentIdentification_GetResponse, error) {
	return service.DocumentIdentification_GetContext(
		context.Background(),
		request,
	)
}

type Partner_AddRequest struct {
	/* Here */
	XMLName  xml.Name `xml:"add"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Partner `xml:"record,omitempty" json:"record,omitempty"`
}

type Partner_AddResponse struct {
	XMLName       xml.Name               `xml:"addResponse"`
	WriteResponse *Partner_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Partner_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Partner_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Partner_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name              `xml:"getResponse"`
	ReadResponse *Partner_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Partner_ReadResponse struct {
	XMLName xml.Name `xml:"readResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Partner `xml:"record,omitempty" json:"record,omitempty"`
}

type PartnerIdentification_AddRequest struct {
	/* Here */
	XMLName  xml.Name               `xml:"add"`
	XmlNSXSI string                 `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                 `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                 `xml:"xmlns:ns1,attr,omitempty"`
	Record   *PartnerIdentification `xml:"record,omitempty" json:"record,omitempty"`
}

type PartnerIdentification_AddResponse struct {
	XMLName       xml.Name                             `xml:"addResponse"`
	WriteResponse *PartnerIdentification_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type PartnerIdentification_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type PartnerIdentification_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type PartnerIdentification_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                            `xml:"getResponse"`
	ReadResponse *PartnerIdentification_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type PartnerIdentification_ReadResponse struct {
	XMLName xml.Name               `xml:"readResponse"`
	Status  *Status                `xml:"status,omitempty" json:"status,omitempty"`
	Record  *PartnerIdentification `xml:"record,omitempty" json:"record,omitempty"`
}

type ContactInformation_AddRequest struct {
	/* Here */
	XMLName  xml.Name            `xml:"add"`
	XmlNSXSI string              `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string              `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string              `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ContactInformation `xml:"record,omitempty" json:"record,omitempty"`
}

type ContactInformation_AddResponse struct {
	XMLName       xml.Name                          `xml:"addResponse"`
	WriteResponse *ContactInformation_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ContactInformation_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ContactInformation_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ContactInformation_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                         `xml:"getResponse"`
	ReadResponse *ContactInformation_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ContactInformation_ReadResponse struct {
	XMLName xml.Name            `xml:"readResponse"`
	Status  *Status             `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ContactInformation `xml:"record,omitempty" json:"record,omitempty"`
}

type Partner struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Identifier *PartnerIdentification `xml:"Identifier,omitempty" json:"Identifier,omitempty"`

	ContactInformation []*ContactInformation `xml:"ContactInformation,omitempty" json:"ContactInformation,omitempty"`
}

type PartnerIdentification struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Identifier"`

	Value string `xml:",chardata" json:"-,"`

	Authority string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Authority,attr,omitempty" json:"Authority,omitempty"`
}

type ContactInformation struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Contact string `xml:"Contact,omitempty" json:"Contact,omitempty"`

	EmailAddress string `xml:"EmailAddress,omitempty" json:"EmailAddress,omitempty"`

	FaxNumber string `xml:"FaxNumber,omitempty" json:"FaxNumber,omitempty"`

	TelephoneNumber string `xml:"TelephoneNumber,omitempty" json:"TelephoneNumber,omitempty"`

	ContactTypeIdentifier string `xml:"ContactTypeIdentifier,omitempty" json:"ContactTypeIdentifier,omitempty"`
}

func (service *netSuitePortType) Partner_AddContext(ctx context.Context, request *Partner_AddRequest) (*Partner_AddResponse, error) {
	response := new(Partner_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Partner_Add(request *Partner_AddRequest) (*Partner_AddResponse, error) {
	return service.Partner_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Partner_GetContext(ctx context.Context, request *Partner_GetRequest) (*Partner_GetResponse, error) {
	response := new(Partner_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Partner_Get(request *Partner_GetRequest) (*Partner_GetResponse, error) {
	return service.Partner_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) PartnerIdentification_AddContext(ctx context.Context, request *PartnerIdentification_AddRequest) (*PartnerIdentification_AddResponse, error) {
	response := new(PartnerIdentification_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) PartnerIdentification_Add(request *PartnerIdentification_AddRequest) (*PartnerIdentification_AddResponse, error) {
	return service.PartnerIdentification_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) PartnerIdentification_GetContext(ctx context.Context, request *PartnerIdentification_GetRequest) (*PartnerIdentification_GetResponse, error) {
	response := new(PartnerIdentification_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) PartnerIdentification_Get(request *PartnerIdentification_GetRequest) (*PartnerIdentification_GetResponse, error) {
	return service.PartnerIdentification_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ContactInformation_AddContext(ctx context.Context, request *ContactInformation_AddRequest) (*ContactInformation_AddResponse, error) {
	response := new(ContactInformation_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ContactInformation_Add(request *ContactInformation_AddRequest) (*ContactInformation_AddResponse, error) {
	return service.ContactInformation_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ContactInformation_GetContext(ctx context.Context, request *ContactInformation_GetRequest) (*ContactInformation_GetResponse, error) {
	response := new(ContactInformation_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ContactInformation_Get(request *ContactInformation_GetRequest) (*ContactInformation_GetResponse, error) {
	return service.ContactInformation_GetContext(
		context.Background(),
		request,
	)
}

// The MIME type as defined by IANA. Please refer to
// http://www.iana.org/assignments/media-types/ for a list of types.
//

type MimeTypeQualifier string

// ISO 639-2; 1998 representation of Language name. Refer to http://www.loc.gov/standards/iso639-2/iso639jac.html to get the latest version of the standard.
//

type Language string

type Manifest_AddRequest struct {
	/* Here */
	XMLName  xml.Name  `xml:"add"`
	XmlNSXSI string    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Manifest `xml:"record,omitempty" json:"record,omitempty"`
}

type Manifest_AddResponse struct {
	XMLName       xml.Name                `xml:"addResponse"`
	WriteResponse *Manifest_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Manifest_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Manifest_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Manifest_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name               `xml:"getResponse"`
	ReadResponse *Manifest_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Manifest_ReadResponse struct {
	XMLName xml.Name  `xml:"readResponse"`
	Status  *Status   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Manifest `xml:"record,omitempty" json:"record,omitempty"`
}

type ManifestItem_AddRequest struct {
	/* Here */
	XMLName  xml.Name      `xml:"add"`
	XmlNSXSI string        `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string        `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string        `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ManifestItem `xml:"record,omitempty" json:"record,omitempty"`
}

type ManifestItem_AddResponse struct {
	XMLName       xml.Name                    `xml:"addResponse"`
	WriteResponse *ManifestItem_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ManifestItem_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ManifestItem_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ManifestItem_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                   `xml:"getResponse"`
	ReadResponse *ManifestItem_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ManifestItem_ReadResponse struct {
	XMLName xml.Name      `xml:"readResponse"`
	Status  *Status       `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ManifestItem `xml:"record,omitempty" json:"record,omitempty"`
}

type Manifest struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	NumberOfItems int32 `xml:"NumberOfItems,omitempty" json:"NumberOfItems,omitempty"`

	ManifestItem []*ManifestItem `xml:"ManifestItem,omitempty" json:"ManifestItem,omitempty"`
}

type ManifestItem struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	MimeTypeQualifierCode *MimeTypeQualifier `xml:"MimeTypeQualifierCode,omitempty" json:"MimeTypeQualifierCode,omitempty"`

	UniformResourceIdentifier AnyURI `xml:"UniformResourceIdentifier,omitempty" json:"UniformResourceIdentifier,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	LanguageCode *Language `xml:"LanguageCode,omitempty" json:"LanguageCode,omitempty"`
}

func (service *netSuitePortType) Manifest_AddContext(ctx context.Context, request *Manifest_AddRequest) (*Manifest_AddResponse, error) {
	response := new(Manifest_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Manifest_Add(request *Manifest_AddRequest) (*Manifest_AddResponse, error) {
	return service.Manifest_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Manifest_GetContext(ctx context.Context, request *Manifest_GetRequest) (*Manifest_GetResponse, error) {
	response := new(Manifest_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Manifest_Get(request *Manifest_GetRequest) (*Manifest_GetResponse, error) {
	return service.Manifest_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ManifestItem_AddContext(ctx context.Context, request *ManifestItem_AddRequest) (*ManifestItem_AddResponse, error) {
	response := new(ManifestItem_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ManifestItem_Add(request *ManifestItem_AddRequest) (*ManifestItem_AddResponse, error) {
	return service.ManifestItem_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ManifestItem_GetContext(ctx context.Context, request *ManifestItem_GetRequest) (*ManifestItem_GetResponse, error) {
	response := new(ManifestItem_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ManifestItem_Get(request *ManifestItem_GetRequest) (*ManifestItem_GetResponse, error) {
	return service.ManifestItem_GetContext(
		context.Background(),
		request,
	)
}

type TypeOfServiceTransaction string

const (
	TypeOfServiceTransactionRequestingServiceTransaction TypeOfServiceTransaction = "RequestingServiceTransaction"

	TypeOfServiceTransactionRespondingServiceTransaction TypeOfServiceTransaction = "RespondingServiceTransaction"
)

type ScopeInformation AnyType

type BusinessScope_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessScope `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessScope_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *BusinessScope_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessScope_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessScope_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessScope_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *BusinessScope_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessScope_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessScope `xml:"record,omitempty" json:"record,omitempty"`
}

type Scope_AddRequest struct {
	/* Here */
	XMLName  xml.Name `xml:"add"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Scope   `xml:"record,omitempty" json:"record,omitempty"`
}

type Scope_AddResponse struct {
	XMLName       xml.Name             `xml:"addResponse"`
	WriteResponse *Scope_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Scope_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Scope_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Scope_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name            `xml:"getResponse"`
	ReadResponse *Scope_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Scope_ReadResponse struct {
	XMLName xml.Name `xml:"readResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Scope   `xml:"record,omitempty" json:"record,omitempty"`
}

type CorrelationInformation_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *CorrelationInformation `xml:"record,omitempty" json:"record,omitempty"`
}

type CorrelationInformation_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *CorrelationInformation_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type CorrelationInformation_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type CorrelationInformation_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type CorrelationInformation_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *CorrelationInformation_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type CorrelationInformation_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *CorrelationInformation `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessService_AddRequest struct {
	/* Here */
	XMLName  xml.Name         `xml:"add"`
	XmlNSXSI string           `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string           `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string           `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessService `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessService_AddResponse struct {
	XMLName       xml.Name                       `xml:"addResponse"`
	WriteResponse *BusinessService_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessService_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessService_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessService_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                      `xml:"getResponse"`
	ReadResponse *BusinessService_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessService_ReadResponse struct {
	XMLName xml.Name         `xml:"readResponse"`
	Status  *Status          `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessService `xml:"record,omitempty" json:"record,omitempty"`
}

type ServiceTransaction_AddRequest struct {
	/* Here */
	XMLName  xml.Name            `xml:"add"`
	XmlNSXSI string              `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string              `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string              `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ServiceTransaction `xml:"record,omitempty" json:"record,omitempty"`
}

type ServiceTransaction_AddResponse struct {
	XMLName       xml.Name                          `xml:"addResponse"`
	WriteResponse *ServiceTransaction_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ServiceTransaction_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ServiceTransaction_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ServiceTransaction_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                         `xml:"getResponse"`
	ReadResponse *ServiceTransaction_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ServiceTransaction_ReadResponse struct {
	XMLName xml.Name            `xml:"readResponse"`
	Status  *Status             `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ServiceTransaction `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessScope struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Scope []*Scope `xml:"Scope,omitempty" json:"Scope,omitempty"`
}

type Scope struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	ScopeInformation []*ScopeInformation `xml:"ScopeInformation,omitempty" json:"ScopeInformation,omitempty"`
}

type CorrelationInformation struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	RequestingDocumentCreationDateTime soap.XSDDateTime `xml:"RequestingDocumentCreationDateTime,omitempty" json:"RequestingDocumentCreationDateTime,omitempty"`

	RequestingDocumentInstanceIdentifier string `xml:"RequestingDocumentInstanceIdentifier,omitempty" json:"RequestingDocumentInstanceIdentifier,omitempty"`

	ExpectedResponseDateTime soap.XSDDateTime `xml:"ExpectedResponseDateTime,omitempty" json:"ExpectedResponseDateTime,omitempty"`
}

type BusinessService struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	BusinessServiceName string `xml:"BusinessServiceName,omitempty" json:"BusinessServiceName,omitempty"`

	ServiceTransaction *ServiceTransaction `xml:"ServiceTransaction,omitempty" json:"ServiceTransaction,omitempty"`
}

type ServiceTransaction struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	TypeOfServiceTransaction *TypeOfServiceTransaction `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TypeOfServiceTransaction,attr,omitempty" json:"TypeOfServiceTransaction,omitempty"`

	IsNonRepudiationRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsNonRepudiationRequired,attr,omitempty" json:"IsNonRepudiationRequired,omitempty"`

	IsAuthenticationRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsAuthenticationRequired,attr,omitempty" json:"IsAuthenticationRequired,omitempty"`

	IsNonRepudiationOfReceiptRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsNonRepudiationOfReceiptRequired,attr,omitempty" json:"IsNonRepudiationOfReceiptRequired,omitempty"`

	IsIntegrityCheckRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsIntegrityCheckRequired,attr,omitempty" json:"IsIntegrityCheckRequired,omitempty"`

	IsApplicationErrorResponseRequested string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsApplicationErrorResponseRequested,attr,omitempty" json:"IsApplicationErrorResponseRequested,omitempty"`

	TimeToAcknowledgeReceipt string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToAcknowledgeReceipt,attr,omitempty" json:"TimeToAcknowledgeReceipt,omitempty"`

	TimeToAcknowledgeAcceptance string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToAcknowledgeAcceptance,attr,omitempty" json:"TimeToAcknowledgeAcceptance,omitempty"`

	TimeToPerform string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToPerform,attr,omitempty" json:"TimeToPerform,omitempty"`

	Recurrence string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Recurrence,attr,omitempty" json:"Recurrence,omitempty"`
}

func (service *netSuitePortType) BusinessScope_AddContext(ctx context.Context, request *BusinessScope_AddRequest) (*BusinessScope_AddResponse, error) {
	response := new(BusinessScope_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessScope_Add(request *BusinessScope_AddRequest) (*BusinessScope_AddResponse, error) {
	return service.BusinessScope_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessScope_GetContext(ctx context.Context, request *BusinessScope_GetRequest) (*BusinessScope_GetResponse, error) {
	response := new(BusinessScope_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessScope_Get(request *BusinessScope_GetRequest) (*BusinessScope_GetResponse, error) {
	return service.BusinessScope_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Scope_AddContext(ctx context.Context, request *Scope_AddRequest) (*Scope_AddResponse, error) {
	response := new(Scope_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Scope_Add(request *Scope_AddRequest) (*Scope_AddResponse, error) {
	return service.Scope_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Scope_GetContext(ctx context.Context, request *Scope_GetRequest) (*Scope_GetResponse, error) {
	response := new(Scope_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Scope_Get(request *Scope_GetRequest) (*Scope_GetResponse, error) {
	return service.Scope_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) CorrelationInformation_AddContext(ctx context.Context, request *CorrelationInformation_AddRequest) (*CorrelationInformation_AddResponse, error) {
	response := new(CorrelationInformation_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) CorrelationInformation_Add(request *CorrelationInformation_AddRequest) (*CorrelationInformation_AddResponse, error) {
	return service.CorrelationInformation_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) CorrelationInformation_GetContext(ctx context.Context, request *CorrelationInformation_GetRequest) (*CorrelationInformation_GetResponse, error) {
	response := new(CorrelationInformation_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) CorrelationInformation_Get(request *CorrelationInformation_GetRequest) (*CorrelationInformation_GetResponse, error) {
	return service.CorrelationInformation_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessService_AddContext(ctx context.Context, request *BusinessService_AddRequest) (*BusinessService_AddResponse, error) {
	response := new(BusinessService_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessService_Add(request *BusinessService_AddRequest) (*BusinessService_AddResponse, error) {
	return service.BusinessService_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessService_GetContext(ctx context.Context, request *BusinessService_GetRequest) (*BusinessService_GetResponse, error) {
	response := new(BusinessService_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessService_Get(request *BusinessService_GetRequest) (*BusinessService_GetResponse, error) {
	return service.BusinessService_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ServiceTransaction_AddContext(ctx context.Context, request *ServiceTransaction_AddRequest) (*ServiceTransaction_AddResponse, error) {
	response := new(ServiceTransaction_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ServiceTransaction_Add(request *ServiceTransaction_AddRequest) (*ServiceTransaction_AddResponse, error) {
	return service.ServiceTransaction_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ServiceTransaction_GetContext(ctx context.Context, request *ServiceTransaction_GetRequest) (*ServiceTransaction_GetResponse, error) {
	response := new(ServiceTransaction_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ServiceTransaction_Get(request *ServiceTransaction_GetRequest) (*ServiceTransaction_GetResponse, error) {
	return service.ServiceTransaction_GetContext(
		context.Background(),
		request,
	)
}

type StandardBusinessDocumentHeader_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *StandardBusinessDocumentHeader `xml:"record,omitempty" json:"record,omitempty"`
}

type StandardBusinessDocumentHeader_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *StandardBusinessDocumentHeader_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type StandardBusinessDocumentHeader_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type StandardBusinessDocumentHeader_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type StandardBusinessDocumentHeader_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *StandardBusinessDocumentHeader_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type StandardBusinessDocumentHeader_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *StandardBusinessDocumentHeader `xml:"record,omitempty" json:"record,omitempty"`
}

type StandardBusinessDocument_AddRequest struct {
	/* Here */
	XMLName  xml.Name                  `xml:"add"`
	XmlNSXSI string                    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *StandardBusinessDocument `xml:"record,omitempty" json:"record,omitempty"`
}

type StandardBusinessDocument_AddResponse struct {
	XMLName       xml.Name                                `xml:"addResponse"`
	WriteResponse *StandardBusinessDocument_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type StandardBusinessDocument_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type StandardBusinessDocument_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type StandardBusinessDocument_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                               `xml:"getResponse"`
	ReadResponse *StandardBusinessDocument_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type StandardBusinessDocument_ReadResponse struct {
	XMLName xml.Name                  `xml:"readResponse"`
	Status  *Status                   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *StandardBusinessDocument `xml:"record,omitempty" json:"record,omitempty"`
}

type StandardBusinessDocumentHeader struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	HeaderVersion string `xml:"HeaderVersion,omitempty" json:"HeaderVersion,omitempty"`

	Sender []*Partner `xml:"Sender,omitempty" json:"Sender,omitempty"`

	Receiver []*Partner `xml:"Receiver,omitempty" json:"Receiver,omitempty"`

	DocumentIdentification *DocumentIdentification `xml:"DocumentIdentification,omitempty" json:"DocumentIdentification,omitempty"`

	Manifest *Manifest `xml:"Manifest,omitempty" json:"Manifest,omitempty"`

	BusinessScope *BusinessScope `xml:"BusinessScope,omitempty" json:"BusinessScope,omitempty"`
}

type StandardBusinessDocument struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

func (service *netSuitePortType) StandardBusinessDocumentHeader_AddContext(ctx context.Context, request *StandardBusinessDocumentHeader_AddRequest) (*StandardBusinessDocumentHeader_AddResponse, error) {
	response := new(StandardBusinessDocumentHeader_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) StandardBusinessDocumentHeader_Add(request *StandardBusinessDocumentHeader_AddRequest) (*StandardBusinessDocumentHeader_AddResponse, error) {
	return service.StandardBusinessDocumentHeader_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) StandardBusinessDocumentHeader_GetContext(ctx context.Context, request *StandardBusinessDocumentHeader_GetRequest) (*StandardBusinessDocumentHeader_GetResponse, error) {
	response := new(StandardBusinessDocumentHeader_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) StandardBusinessDocumentHeader_Get(request *StandardBusinessDocumentHeader_GetRequest) (*StandardBusinessDocumentHeader_GetResponse, error) {
	return service.StandardBusinessDocumentHeader_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) StandardBusinessDocument_AddContext(ctx context.Context, request *StandardBusinessDocument_AddRequest) (*StandardBusinessDocument_AddResponse, error) {
	response := new(StandardBusinessDocument_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) StandardBusinessDocument_Add(request *StandardBusinessDocument_AddRequest) (*StandardBusinessDocument_AddResponse, error) {
	return service.StandardBusinessDocument_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) StandardBusinessDocument_GetContext(ctx context.Context, request *StandardBusinessDocument_GetRequest) (*StandardBusinessDocument_GetResponse, error) {
	response := new(StandardBusinessDocument_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) StandardBusinessDocument_Get(request *StandardBusinessDocument_GetRequest) (*StandardBusinessDocument_GetResponse, error) {
	return service.StandardBusinessDocument_GetContext(
		context.Background(),
		request,
	)
}

type ActionType string

const (
	ActionTypeADD ActionType = "ADD"

	ActionTypeOBSERVE ActionType = "OBSERVE"

	ActionTypeDELETE ActionType = "DELETE"
)

type ParentIDType AnyURI

type BusinessStepIDType AnyURI

type DispositionIDType AnyURI

type EPCClassType AnyURI

type UOMType string

type ReadPointIDType AnyURI

type BusinessLocationIDType AnyURI

type BusinessTransactionIDType AnyURI

type BusinessTransactionTypeIDType AnyURI

type SourceDestIDType AnyURI

type SourceDestTypeIDType AnyURI

type TransformationIDType AnyURI

type EventIDType AnyURI

type ErrorReasonIDType AnyURI

type EPCISDocument EPCISDocumentType

type EPCISDocumentType_AddRequest struct {
	/* Here */
	XMLName  xml.Name           `xml:"add"`
	XmlNSXSI string             `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string             `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string             `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISDocumentType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISDocumentType_AddResponse struct {
	XMLName       xml.Name                         `xml:"addResponse"`
	WriteResponse *EPCISDocumentType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISDocumentType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISDocumentType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISDocumentType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                        `xml:"getResponse"`
	ReadResponse *EPCISDocumentType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISDocumentType_ReadResponse struct {
	XMLName xml.Name           `xml:"readResponse"`
	Status  *Status            `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISDocumentType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISDocumentExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                    `xml:"add"`
	XmlNSXSI string                      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISDocumentExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISDocumentExtensionType_AddResponse struct {
	XMLName       xml.Name                                  `xml:"addResponse"`
	WriteResponse *EPCISDocumentExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISDocumentExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISDocumentExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISDocumentExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                 `xml:"getResponse"`
	ReadResponse *EPCISDocumentExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISDocumentExtensionType_ReadResponse struct {
	XMLName xml.Name                    `xml:"readResponse"`
	Status  *Status                     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISDocumentExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderType_AddRequest struct {
	/* Here */
	XMLName  xml.Name         `xml:"add"`
	XmlNSXSI string           `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string           `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string           `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISHeaderType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderType_AddResponse struct {
	XMLName       xml.Name                       `xml:"addResponse"`
	WriteResponse *EPCISHeaderType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISHeaderType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISHeaderType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                      `xml:"getResponse"`
	ReadResponse *EPCISHeaderType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderType_ReadResponse struct {
	XMLName xml.Name         `xml:"readResponse"`
	Status  *Status          `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISHeaderType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                  `xml:"add"`
	XmlNSXSI string                    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISHeaderExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderExtensionType_AddResponse struct {
	XMLName       xml.Name                                `xml:"addResponse"`
	WriteResponse *EPCISHeaderExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISHeaderExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISHeaderExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                               `xml:"getResponse"`
	ReadResponse *EPCISHeaderExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderExtensionType_ReadResponse struct {
	XMLName xml.Name                  `xml:"readResponse"`
	Status  *Status                   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISHeaderExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                   `xml:"add"`
	XmlNSXSI string                     `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                     `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                     `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISHeaderExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISHeaderExtension2Type_AddResponse struct {
	XMLName       xml.Name                                 `xml:"addResponse"`
	WriteResponse *EPCISHeaderExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISHeaderExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISHeaderExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                `xml:"getResponse"`
	ReadResponse *EPCISHeaderExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISHeaderExtension2Type_ReadResponse struct {
	XMLName xml.Name                   `xml:"readResponse"`
	Status  *Status                    `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISHeaderExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISMasterDataType_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISMasterDataType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISMasterDataType_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *EPCISMasterDataType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISMasterDataType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISMasterDataType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISMasterDataType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *EPCISMasterDataType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISMasterDataType_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISMasterDataType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISMasterDataExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                      `xml:"add"`
	XmlNSXSI string                        `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                        `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                        `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISMasterDataExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISMasterDataExtensionType_AddResponse struct {
	XMLName       xml.Name                                    `xml:"addResponse"`
	WriteResponse *EPCISMasterDataExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISMasterDataExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISMasterDataExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISMasterDataExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                   `xml:"getResponse"`
	ReadResponse *EPCISMasterDataExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISMasterDataExtensionType_ReadResponse struct {
	XMLName xml.Name                      `xml:"readResponse"`
	Status  *Status                       `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISMasterDataExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name            `xml:"add"`
	XmlNSXSI string              `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string              `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string              `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyListType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyListType_AddResponse struct {
	XMLName       xml.Name                          `xml:"addResponse"`
	WriteResponse *VocabularyListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                         `xml:"getResponse"`
	ReadResponse *VocabularyListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyListType_ReadResponse struct {
	XMLName xml.Name            `xml:"readResponse"`
	Status  *Status             `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyListType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyType_AddRequest struct {
	/* Here */
	XMLName  xml.Name        `xml:"add"`
	XmlNSXSI string          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyType_AddResponse struct {
	XMLName       xml.Name                      `xml:"addResponse"`
	WriteResponse *VocabularyType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                     `xml:"getResponse"`
	ReadResponse *VocabularyType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyType_ReadResponse struct {
	XMLName xml.Name        `xml:"readResponse"`
	Status  *Status         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                   `xml:"add"`
	XmlNSXSI string                     `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                     `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                     `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyElementListType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementListType_AddResponse struct {
	XMLName       xml.Name                                 `xml:"addResponse"`
	WriteResponse *VocabularyElementListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyElementListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyElementListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyElementListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                `xml:"getResponse"`
	ReadResponse *VocabularyElementListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyElementListType_ReadResponse struct {
	XMLName xml.Name                   `xml:"readResponse"`
	Status  *Status                    `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyElementListType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementType_AddRequest struct {
	/* Here */
	XMLName  xml.Name               `xml:"add"`
	XmlNSXSI string                 `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                 `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                 `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyElementType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementType_AddResponse struct {
	XMLName       xml.Name                             `xml:"addResponse"`
	WriteResponse *VocabularyElementType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyElementType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyElementType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyElementType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                            `xml:"getResponse"`
	ReadResponse *VocabularyElementType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyElementType_ReadResponse struct {
	XMLName xml.Name               `xml:"readResponse"`
	Status  *Status                `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyElementType `xml:"record,omitempty" json:"record,omitempty"`
}

type AttributeType_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *AttributeType `xml:"record,omitempty" json:"record,omitempty"`
}

type AttributeType_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *AttributeType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type AttributeType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type AttributeType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type AttributeType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *AttributeType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type AttributeType_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *AttributeType `xml:"record,omitempty" json:"record,omitempty"`
}

type IDListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name    `xml:"add"`
	XmlNSXSI string      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *IDListType `xml:"record,omitempty" json:"record,omitempty"`
}

type IDListType_AddResponse struct {
	XMLName       xml.Name                  `xml:"addResponse"`
	WriteResponse *IDListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type IDListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type IDListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type IDListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                 `xml:"getResponse"`
	ReadResponse *IDListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type IDListType_ReadResponse struct {
	XMLName xml.Name    `xml:"readResponse"`
	Status  *Status     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *IDListType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyExtensionType_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *VocabularyExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *VocabularyExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyExtensionType_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VocabularyElementExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type VocabularyElementExtensionType_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *VocabularyElementExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VocabularyElementExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VocabularyElementExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VocabularyElementExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *VocabularyElementExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VocabularyElementExtensionType_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VocabularyElementExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISBodyType_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISBodyType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISBodyType_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *EPCISBodyType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISBodyType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISBodyType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISBodyType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *EPCISBodyType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISBodyType_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISBodyType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISBodyExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISBodyExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISBodyExtensionType_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *EPCISBodyExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISBodyExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISBodyExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISBodyExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *EPCISBodyExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISBodyExtensionType_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISBodyExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EventListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EventListType `xml:"record,omitempty" json:"record,omitempty"`
}

type EventListType_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *EventListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EventListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EventListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EventListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *EventListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EventListType_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EventListType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventListExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                     `xml:"add"`
	XmlNSXSI string                       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISEventListExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventListExtensionType_AddResponse struct {
	XMLName       xml.Name                                   `xml:"addResponse"`
	WriteResponse *EPCISEventListExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISEventListExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISEventListExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISEventListExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                  `xml:"getResponse"`
	ReadResponse *EPCISEventListExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISEventListExtensionType_ReadResponse struct {
	XMLName xml.Name                     `xml:"readResponse"`
	Status  *Status                      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISEventListExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventListExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                      `xml:"add"`
	XmlNSXSI string                        `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                        `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                        `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISEventListExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventListExtension2Type_AddResponse struct {
	XMLName       xml.Name                                    `xml:"addResponse"`
	WriteResponse *EPCISEventListExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISEventListExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISEventListExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISEventListExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                   `xml:"getResponse"`
	ReadResponse *EPCISEventListExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISEventListExtension2Type_ReadResponse struct {
	XMLName xml.Name                      `xml:"readResponse"`
	Status  *Status                       `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISEventListExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name     `xml:"add"`
	XmlNSXSI string       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCListType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCListType_AddResponse struct {
	XMLName       xml.Name                   `xml:"addResponse"`
	WriteResponse *EPCListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                  `xml:"getResponse"`
	ReadResponse *EPCListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCListType_ReadResponse struct {
	XMLName xml.Name     `xml:"readResponse"`
	Status  *Status      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCListType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityElementType_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QuantityElementType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityElementType_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *QuantityElementType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QuantityElementType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QuantityElementType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QuantityElementType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *QuantityElementType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QuantityElementType_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QuantityElementType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name          `xml:"add"`
	XmlNSXSI string            `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string            `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string            `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QuantityListType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityListType_AddResponse struct {
	XMLName       xml.Name                        `xml:"addResponse"`
	WriteResponse *QuantityListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QuantityListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QuantityListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QuantityListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                       `xml:"getResponse"`
	ReadResponse *QuantityListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QuantityListType_ReadResponse struct {
	XMLName xml.Name          `xml:"readResponse"`
	Status  *Status           `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QuantityListType `xml:"record,omitempty" json:"record,omitempty"`
}

type ReadPointType_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ReadPointType `xml:"record,omitempty" json:"record,omitempty"`
}

type ReadPointType_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *ReadPointType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ReadPointType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ReadPointType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ReadPointType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *ReadPointType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ReadPointType_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ReadPointType `xml:"record,omitempty" json:"record,omitempty"`
}

type ReadPointExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ReadPointExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type ReadPointExtensionType_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *ReadPointExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ReadPointExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ReadPointExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ReadPointExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *ReadPointExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ReadPointExtensionType_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ReadPointExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessLocationType_AddRequest struct {
	/* Here */
	XMLName  xml.Name              `xml:"add"`
	XmlNSXSI string                `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessLocationType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessLocationType_AddResponse struct {
	XMLName       xml.Name                            `xml:"addResponse"`
	WriteResponse *BusinessLocationType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessLocationType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessLocationType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessLocationType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                           `xml:"getResponse"`
	ReadResponse *BusinessLocationType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessLocationType_ReadResponse struct {
	XMLName xml.Name              `xml:"readResponse"`
	Status  *Status               `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessLocationType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessLocationExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                       `xml:"add"`
	XmlNSXSI string                         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessLocationExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessLocationExtensionType_AddResponse struct {
	XMLName       xml.Name                                     `xml:"addResponse"`
	WriteResponse *BusinessLocationExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessLocationExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessLocationExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessLocationExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                    `xml:"getResponse"`
	ReadResponse *BusinessLocationExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessLocationExtensionType_ReadResponse struct {
	XMLName xml.Name                       `xml:"readResponse"`
	Status  *Status                        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessLocationExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessTransactionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessTransactionType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessTransactionType_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *BusinessTransactionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessTransactionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessTransactionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessTransactionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *BusinessTransactionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessTransactionType_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessTransactionType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessTransactionListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                     `xml:"add"`
	XmlNSXSI string                       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *BusinessTransactionListType `xml:"record,omitempty" json:"record,omitempty"`
}

type BusinessTransactionListType_AddResponse struct {
	XMLName       xml.Name                                   `xml:"addResponse"`
	WriteResponse *BusinessTransactionListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type BusinessTransactionListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type BusinessTransactionListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type BusinessTransactionListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                  `xml:"getResponse"`
	ReadResponse *BusinessTransactionListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type BusinessTransactionListType_ReadResponse struct {
	XMLName xml.Name                     `xml:"readResponse"`
	Status  *Status                      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *BusinessTransactionListType `xml:"record,omitempty" json:"record,omitempty"`
}

type SourceDestType_AddRequest struct {
	/* Here */
	XMLName  xml.Name        `xml:"add"`
	XmlNSXSI string          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SourceDestType `xml:"record,omitempty" json:"record,omitempty"`
}

type SourceDestType_AddResponse struct {
	XMLName       xml.Name                      `xml:"addResponse"`
	WriteResponse *SourceDestType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SourceDestType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SourceDestType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SourceDestType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                     `xml:"getResponse"`
	ReadResponse *SourceDestType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SourceDestType_ReadResponse struct {
	XMLName xml.Name        `xml:"readResponse"`
	Status  *Status         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SourceDestType `xml:"record,omitempty" json:"record,omitempty"`
}

type SourceListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name        `xml:"add"`
	XmlNSXSI string          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SourceListType `xml:"record,omitempty" json:"record,omitempty"`
}

type SourceListType_AddResponse struct {
	XMLName       xml.Name                      `xml:"addResponse"`
	WriteResponse *SourceListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SourceListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SourceListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SourceListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                     `xml:"getResponse"`
	ReadResponse *SourceListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SourceListType_ReadResponse struct {
	XMLName xml.Name        `xml:"readResponse"`
	Status  *Status         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SourceListType `xml:"record,omitempty" json:"record,omitempty"`
}

type DestinationListType_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *DestinationListType `xml:"record,omitempty" json:"record,omitempty"`
}

type DestinationListType_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *DestinationListType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type DestinationListType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type DestinationListType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type DestinationListType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *DestinationListType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type DestinationListType_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *DestinationListType `xml:"record,omitempty" json:"record,omitempty"`
}

type ILMDType_AddRequest struct {
	/* Here */
	XMLName  xml.Name  `xml:"add"`
	XmlNSXSI string    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ILMDType `xml:"record,omitempty" json:"record,omitempty"`
}

type ILMDType_AddResponse struct {
	XMLName       xml.Name                `xml:"addResponse"`
	WriteResponse *ILMDType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ILMDType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ILMDType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ILMDType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name               `xml:"getResponse"`
	ReadResponse *ILMDType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ILMDType_ReadResponse struct {
	XMLName xml.Name  `xml:"readResponse"`
	Status  *Status   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ILMDType `xml:"record,omitempty" json:"record,omitempty"`
}

type ILMDExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name           `xml:"add"`
	XmlNSXSI string             `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string             `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string             `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ILMDExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type ILMDExtensionType_AddResponse struct {
	XMLName       xml.Name                         `xml:"addResponse"`
	WriteResponse *ILMDExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ILMDExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ILMDExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ILMDExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                        `xml:"getResponse"`
	ReadResponse *ILMDExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ILMDExtensionType_ReadResponse struct {
	XMLName xml.Name           `xml:"readResponse"`
	Status  *Status            `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ILMDExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type CorrectiveEventIDsType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *CorrectiveEventIDsType `xml:"record,omitempty" json:"record,omitempty"`
}

type CorrectiveEventIDsType_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *CorrectiveEventIDsType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type CorrectiveEventIDsType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type CorrectiveEventIDsType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type CorrectiveEventIDsType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *CorrectiveEventIDsType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type CorrectiveEventIDsType_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *CorrectiveEventIDsType `xml:"record,omitempty" json:"record,omitempty"`
}

type ErrorDeclarationType_AddRequest struct {
	/* Here */
	XMLName  xml.Name              `xml:"add"`
	XmlNSXSI string                `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ErrorDeclarationType `xml:"record,omitempty" json:"record,omitempty"`
}

type ErrorDeclarationType_AddResponse struct {
	XMLName       xml.Name                            `xml:"addResponse"`
	WriteResponse *ErrorDeclarationType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ErrorDeclarationType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ErrorDeclarationType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ErrorDeclarationType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                           `xml:"getResponse"`
	ReadResponse *ErrorDeclarationType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ErrorDeclarationType_ReadResponse struct {
	XMLName xml.Name              `xml:"readResponse"`
	Status  *Status               `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ErrorDeclarationType `xml:"record,omitempty" json:"record,omitempty"`
}

type ErrorDeclarationExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                       `xml:"add"`
	XmlNSXSI string                         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ErrorDeclarationExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type ErrorDeclarationExtensionType_AddResponse struct {
	XMLName       xml.Name                                     `xml:"addResponse"`
	WriteResponse *ErrorDeclarationExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ErrorDeclarationExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ErrorDeclarationExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ErrorDeclarationExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                    `xml:"getResponse"`
	ReadResponse *ErrorDeclarationExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ErrorDeclarationExtensionType_ReadResponse struct {
	XMLName xml.Name                       `xml:"readResponse"`
	Status  *Status                        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ErrorDeclarationExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name        `xml:"add"`
	XmlNSXSI string          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventType_AddResponse struct {
	XMLName       xml.Name                      `xml:"addResponse"`
	WriteResponse *EPCISEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                     `xml:"getResponse"`
	ReadResponse *EPCISEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISEventType_ReadResponse struct {
	XMLName xml.Name        `xml:"readResponse"`
	Status  *Status         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventExtensionType_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *EPCISEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *EPCISEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISEventExtensionType_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                  `xml:"add"`
	XmlNSXSI string                    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISEventExtension2Type_AddResponse struct {
	XMLName       xml.Name                                `xml:"addResponse"`
	WriteResponse *EPCISEventExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISEventExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISEventExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISEventExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                               `xml:"getResponse"`
	ReadResponse *EPCISEventExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISEventExtension2Type_ReadResponse struct {
	XMLName xml.Name                  `xml:"readResponse"`
	Status  *Status                   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name         `xml:"add"`
	XmlNSXSI string           `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string           `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string           `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ObjectEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventType_AddResponse struct {
	XMLName       xml.Name                       `xml:"addResponse"`
	WriteResponse *ObjectEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ObjectEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ObjectEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ObjectEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                      `xml:"getResponse"`
	ReadResponse *ObjectEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ObjectEventType_ReadResponse struct {
	XMLName xml.Name         `xml:"readResponse"`
	Status  *Status          `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ObjectEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                  `xml:"add"`
	XmlNSXSI string                    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ObjectEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventExtensionType_AddResponse struct {
	XMLName       xml.Name                                `xml:"addResponse"`
	WriteResponse *ObjectEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ObjectEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ObjectEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ObjectEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                               `xml:"getResponse"`
	ReadResponse *ObjectEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ObjectEventExtensionType_ReadResponse struct {
	XMLName xml.Name                  `xml:"readResponse"`
	Status  *Status                   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ObjectEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                   `xml:"add"`
	XmlNSXSI string                     `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                     `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                     `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ObjectEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type ObjectEventExtension2Type_AddResponse struct {
	XMLName       xml.Name                                 `xml:"addResponse"`
	WriteResponse *ObjectEventExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ObjectEventExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ObjectEventExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ObjectEventExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                `xml:"getResponse"`
	ReadResponse *ObjectEventExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ObjectEventExtension2Type_ReadResponse struct {
	XMLName xml.Name                   `xml:"readResponse"`
	Status  *Status                    `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ObjectEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name              `xml:"add"`
	XmlNSXSI string                `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                `xml:"xmlns:ns1,attr,omitempty"`
	Record   *AggregationEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventType_AddResponse struct {
	XMLName       xml.Name                            `xml:"addResponse"`
	WriteResponse *AggregationEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type AggregationEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type AggregationEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type AggregationEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                           `xml:"getResponse"`
	ReadResponse *AggregationEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type AggregationEventType_ReadResponse struct {
	XMLName xml.Name              `xml:"readResponse"`
	Status  *Status               `xml:"status,omitempty" json:"status,omitempty"`
	Record  *AggregationEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                       `xml:"add"`
	XmlNSXSI string                         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *AggregationEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventExtensionType_AddResponse struct {
	XMLName       xml.Name                                     `xml:"addResponse"`
	WriteResponse *AggregationEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type AggregationEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type AggregationEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type AggregationEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                    `xml:"getResponse"`
	ReadResponse *AggregationEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type AggregationEventExtensionType_ReadResponse struct {
	XMLName xml.Name                       `xml:"readResponse"`
	Status  *Status                        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *AggregationEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *AggregationEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type AggregationEventExtension2Type_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *AggregationEventExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type AggregationEventExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type AggregationEventExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type AggregationEventExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *AggregationEventExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type AggregationEventExtension2Type_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *AggregationEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name           `xml:"add"`
	XmlNSXSI string             `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string             `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string             `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QuantityEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityEventType_AddResponse struct {
	XMLName       xml.Name                         `xml:"addResponse"`
	WriteResponse *QuantityEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QuantityEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QuantityEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QuantityEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                        `xml:"getResponse"`
	ReadResponse *QuantityEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QuantityEventType_ReadResponse struct {
	XMLName xml.Name           `xml:"readResponse"`
	Status  *Status            `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QuantityEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                    `xml:"add"`
	XmlNSXSI string                      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QuantityEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuantityEventExtensionType_AddResponse struct {
	XMLName       xml.Name                                  `xml:"addResponse"`
	WriteResponse *QuantityEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QuantityEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QuantityEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QuantityEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                 `xml:"getResponse"`
	ReadResponse *QuantityEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QuantityEventExtensionType_ReadResponse struct {
	XMLName xml.Name                    `xml:"readResponse"`
	Status  *Status                     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QuantityEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name              `xml:"add"`
	XmlNSXSI string                `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                `xml:"xmlns:ns1,attr,omitempty"`
	Record   *TransactionEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventType_AddResponse struct {
	XMLName       xml.Name                            `xml:"addResponse"`
	WriteResponse *TransactionEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type TransactionEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type TransactionEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type TransactionEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                           `xml:"getResponse"`
	ReadResponse *TransactionEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type TransactionEventType_ReadResponse struct {
	XMLName xml.Name              `xml:"readResponse"`
	Status  *Status               `xml:"status,omitempty" json:"status,omitempty"`
	Record  *TransactionEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                       `xml:"add"`
	XmlNSXSI string                         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *TransactionEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventExtensionType_AddResponse struct {
	XMLName       xml.Name                                     `xml:"addResponse"`
	WriteResponse *TransactionEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type TransactionEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type TransactionEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type TransactionEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                    `xml:"getResponse"`
	ReadResponse *TransactionEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type TransactionEventExtensionType_ReadResponse struct {
	XMLName xml.Name                       `xml:"readResponse"`
	Status  *Status                        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *TransactionEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventExtension2Type_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *TransactionEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type TransactionEventExtension2Type_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *TransactionEventExtension2Type_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type TransactionEventExtension2Type_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type TransactionEventExtension2Type_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type TransactionEventExtension2Type_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *TransactionEventExtension2Type_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type TransactionEventExtension2Type_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *TransactionEventExtension2Type `xml:"record,omitempty" json:"record,omitempty"`
}

type TransformationEventType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *TransformationEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransformationEventType_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *TransformationEventType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type TransformationEventType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type TransformationEventType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type TransformationEventType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *TransformationEventType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type TransformationEventType_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *TransformationEventType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransformationEventExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                          `xml:"add"`
	XmlNSXSI string                            `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                            `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                            `xml:"xmlns:ns1,attr,omitempty"`
	Record   *TransformationEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type TransformationEventExtensionType_AddResponse struct {
	XMLName       xml.Name                                        `xml:"addResponse"`
	WriteResponse *TransformationEventExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type TransformationEventExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type TransformationEventExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type TransformationEventExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                       `xml:"getResponse"`
	ReadResponse *TransformationEventExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type TransformationEventExtensionType_ReadResponse struct {
	XMLName xml.Name                          `xml:"readResponse"`
	Status  *Status                           `xml:"status,omitempty" json:"status,omitempty"`
	Record  *TransformationEventExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISDocumentType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISDocument"`

	*Document

	EPCISHeader *EPCISHeaderType `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISBodyType `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISDocumentExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISDocumentExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISHeader"`

	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Extension *EPCISHeaderExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	EPCISMasterData *EPCISMasterDataType `xml:"EPCISMasterData,omitempty" json:"EPCISMasterData,omitempty"`

	Extension *EPCISHeaderExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISHeaderExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISMasterDataType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISMasterData"`

	VocabularyList *VocabularyListType `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`

	Extension *EPCISMasterDataExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISMasterDataExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyList"`

	Vocabulary []*VocabularyType `xml:"Vocabulary,omitempty" json:"Vocabulary,omitempty"`
}

type VocabularyType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 Vocabulary"`

	VocabularyElementList *VocabularyElementListType `xml:"VocabularyElementList,omitempty" json:"VocabularyElementList,omitempty"`

	Extension *VocabularyExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Type AnyURI `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type VocabularyElementListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyElementList"`

	VocabularyElement []*VocabularyElementType `xml:"VocabularyElement,omitempty" json:"VocabularyElement,omitempty"`
}

type VocabularyElementType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyElement"`

	Attribute []*AttributeType `xml:"attribute,omitempty" json:"attribute,omitempty"`

	Children *IDListType `xml:"children,omitempty" json:"children,omitempty"`

	Extension *VocabularyElementExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Id AnyURI `xml:"urn:epcglobal:epcis:xsd:1 id,attr,omitempty" json:"id,omitempty"`
}

type AttributeType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 attribute"`

	AnyType

	Id AnyURI `xml:"urn:epcglobal:epcis:xsd:1 id,attr,omitempty" json:"id,omitempty"`
}

type IDListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 children"`

	Id []AnyURI `xml:"id,omitempty" json:"id,omitempty"`
}

type VocabularyExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyElementExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISBody"`

	EventList *EventListType `xml:"EventList,omitempty" json:"EventList,omitempty"`

	Extension *EPCISBodyExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EventListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EventList"`

	ObjectEvent []*ObjectEventType `xml:"ObjectEvent,omitempty" json:"ObjectEvent,omitempty"`

	AggregationEvent []*AggregationEventType `xml:"AggregationEvent,omitempty" json:"AggregationEvent,omitempty"`

	QuantityEvent []*QuantityEventType `xml:"QuantityEvent,omitempty" json:"QuantityEvent,omitempty"`

	TransactionEvent []*TransactionEventType `xml:"TransactionEvent,omitempty" json:"TransactionEvent,omitempty"`

	Extension *EPCISEventListExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	TransformationEvent *TransformationEventType `xml:"TransformationEvent,omitempty" json:"TransformationEvent,omitempty"`

	Extension *EPCISEventListExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Epc []*EPC `xml:"epc,omitempty" json:"epc,omitempty"`
}

type QuantityElementType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 quantityElement"`

	EpcClass *EPCClassType `xml:"epcClass,omitempty" json:"epcClass,omitempty"`
}

type QuantityListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	QuantityElement []*QuantityElementType `xml:"quantityElement,omitempty" json:"quantityElement,omitempty"`
}

type ReadPointType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 readPoint"`

	Id *ReadPointIDType `xml:"id,omitempty" json:"id,omitempty"`

	Extension *ReadPointExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ReadPointExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizLocation"`

	Id *BusinessLocationIDType `xml:"id,omitempty" json:"id,omitempty"`

	Extension *BusinessLocationExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessTransactionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizTransaction"`

	Value *BusinessTransactionIDType `xml:",chardata" json:"-,"`

	Type *BusinessTransactionTypeIDType `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type BusinessTransactionListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizTransactionList"`

	BizTransaction []*BusinessTransactionType `xml:"bizTransaction,omitempty" json:"bizTransaction,omitempty"`
}

type SourceDestType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Value *SourceDestIDType `xml:",chardata" json:"-,"`

	Type *SourceDestTypeIDType `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type SourceListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 sourceList"`

	Source []*SourceDestType `xml:"source,omitempty" json:"source,omitempty"`
}

type DestinationListType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 destinationList"`

	Destination []*SourceDestType `xml:"destination,omitempty" json:"destination,omitempty"`
}

type ILMDType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 ilmd"`

	Extension *ILMDExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ILMDExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type CorrectiveEventIDsType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 correctiveEventIDs"`

	CorrectiveEventID []*EventIDType `xml:"correctiveEventID,omitempty" json:"correctiveEventID,omitempty"`
}

type ErrorDeclarationType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 errorDeclaration"`

	DeclarationTime soap.XSDDateTime `xml:"declarationTime,omitempty" json:"declarationTime,omitempty"`

	Reason *ErrorReasonIDType `xml:"reason,omitempty" json:"reason,omitempty"`

	CorrectiveEventIDs *CorrectiveEventIDsType `xml:"correctiveEventIDs,omitempty" json:"correctiveEventIDs,omitempty"`

	Extension *ErrorDeclarationExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ErrorDeclarationExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	EventTime soap.XSDDateTime `xml:"eventTime,omitempty" json:"eventTime,omitempty"`

	RecordTime soap.XSDDateTime `xml:"recordTime,omitempty" json:"recordTime,omitempty"`

	EventTimeZoneOffset string `xml:"eventTimeZoneOffset,omitempty" json:"eventTimeZoneOffset,omitempty"`

	BaseExtension *EPCISEventExtensionType `xml:"baseExtension,omitempty" json:"baseExtension,omitempty"`
}

type EPCISEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 baseExtension"`

	EventID *EventIDType `xml:"eventID,omitempty" json:"eventID,omitempty"`

	ErrorDeclaration *ErrorDeclarationType `xml:"errorDeclaration,omitempty" json:"errorDeclaration,omitempty"`

	Extension *EPCISEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ObjectEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 ObjectEvent"`

	*EPCISEventType

	EpcList *EPCListType `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *ObjectEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	QuantityList *QuantityListType `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDType `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *ObjectEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type AggregationEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 AggregationEvent"`

	*EPCISEventType

	ParentID *ParentIDType `xml:"parentID,omitempty" json:"parentID,omitempty"`

	ChildEPCs *EPCListType `xml:"childEPCs,omitempty" json:"childEPCs,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *AggregationEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	ChildQuantityList *QuantityListType `xml:"childQuantityList,omitempty" json:"childQuantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *AggregationEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QuantityEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 QuantityEvent"`

	*EPCISEventType

	EpcClass *EPCClassType `xml:"epcClass,omitempty" json:"epcClass,omitempty"`

	Quantity int32 `xml:"quantity,omitempty" json:"quantity,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *QuantityEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type QuantityEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransactionEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 TransactionEvent"`

	*EPCISEventType

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	ParentID *ParentIDType `xml:"parentID,omitempty" json:"parentID,omitempty"`

	EpcList *EPCListType `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	Extension *TransactionEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	QuantityList *QuantityListType `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *TransactionEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtension2Type struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransformationEventType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 TransformationEvent"`

	*EPCISEventType

	InputEPCList *EPCListType `xml:"inputEPCList,omitempty" json:"inputEPCList,omitempty"`

	InputQuantityList *QuantityListType `xml:"inputQuantityList,omitempty" json:"inputQuantityList,omitempty"`

	OutputEPCList *EPCListType `xml:"outputEPCList,omitempty" json:"outputEPCList,omitempty"`

	OutputQuantityList *QuantityListType `xml:"outputQuantityList,omitempty" json:"outputQuantityList,omitempty"`

	TransformationID *TransformationIDType `xml:"transformationID,omitempty" json:"transformationID,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDType `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *TransformationEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransformationEventExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

func (service *netSuitePortType) EPCISDocumentType_AddContext(ctx context.Context, request *EPCISDocumentType_AddRequest) (*EPCISDocumentType_AddResponse, error) {
	response := new(EPCISDocumentType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISDocumentType_Add(request *EPCISDocumentType_AddRequest) (*EPCISDocumentType_AddResponse, error) {
	return service.EPCISDocumentType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISDocumentType_GetContext(ctx context.Context, request *EPCISDocumentType_GetRequest) (*EPCISDocumentType_GetResponse, error) {
	response := new(EPCISDocumentType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISDocumentType_Get(request *EPCISDocumentType_GetRequest) (*EPCISDocumentType_GetResponse, error) {
	return service.EPCISDocumentType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISDocumentExtensionType_AddContext(ctx context.Context, request *EPCISDocumentExtensionType_AddRequest) (*EPCISDocumentExtensionType_AddResponse, error) {
	response := new(EPCISDocumentExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISDocumentExtensionType_Add(request *EPCISDocumentExtensionType_AddRequest) (*EPCISDocumentExtensionType_AddResponse, error) {
	return service.EPCISDocumentExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISDocumentExtensionType_GetContext(ctx context.Context, request *EPCISDocumentExtensionType_GetRequest) (*EPCISDocumentExtensionType_GetResponse, error) {
	response := new(EPCISDocumentExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISDocumentExtensionType_Get(request *EPCISDocumentExtensionType_GetRequest) (*EPCISDocumentExtensionType_GetResponse, error) {
	return service.EPCISDocumentExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderType_AddContext(ctx context.Context, request *EPCISHeaderType_AddRequest) (*EPCISHeaderType_AddResponse, error) {
	response := new(EPCISHeaderType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderType_Add(request *EPCISHeaderType_AddRequest) (*EPCISHeaderType_AddResponse, error) {
	return service.EPCISHeaderType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderType_GetContext(ctx context.Context, request *EPCISHeaderType_GetRequest) (*EPCISHeaderType_GetResponse, error) {
	response := new(EPCISHeaderType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderType_Get(request *EPCISHeaderType_GetRequest) (*EPCISHeaderType_GetResponse, error) {
	return service.EPCISHeaderType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderExtensionType_AddContext(ctx context.Context, request *EPCISHeaderExtensionType_AddRequest) (*EPCISHeaderExtensionType_AddResponse, error) {
	response := new(EPCISHeaderExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderExtensionType_Add(request *EPCISHeaderExtensionType_AddRequest) (*EPCISHeaderExtensionType_AddResponse, error) {
	return service.EPCISHeaderExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderExtensionType_GetContext(ctx context.Context, request *EPCISHeaderExtensionType_GetRequest) (*EPCISHeaderExtensionType_GetResponse, error) {
	response := new(EPCISHeaderExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderExtensionType_Get(request *EPCISHeaderExtensionType_GetRequest) (*EPCISHeaderExtensionType_GetResponse, error) {
	return service.EPCISHeaderExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderExtension2Type_AddContext(ctx context.Context, request *EPCISHeaderExtension2Type_AddRequest) (*EPCISHeaderExtension2Type_AddResponse, error) {
	response := new(EPCISHeaderExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderExtension2Type_Add(request *EPCISHeaderExtension2Type_AddRequest) (*EPCISHeaderExtension2Type_AddResponse, error) {
	return service.EPCISHeaderExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISHeaderExtension2Type_GetContext(ctx context.Context, request *EPCISHeaderExtension2Type_GetRequest) (*EPCISHeaderExtension2Type_GetResponse, error) {
	response := new(EPCISHeaderExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISHeaderExtension2Type_Get(request *EPCISHeaderExtension2Type_GetRequest) (*EPCISHeaderExtension2Type_GetResponse, error) {
	return service.EPCISHeaderExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISMasterDataType_AddContext(ctx context.Context, request *EPCISMasterDataType_AddRequest) (*EPCISMasterDataType_AddResponse, error) {
	response := new(EPCISMasterDataType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISMasterDataType_Add(request *EPCISMasterDataType_AddRequest) (*EPCISMasterDataType_AddResponse, error) {
	return service.EPCISMasterDataType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISMasterDataType_GetContext(ctx context.Context, request *EPCISMasterDataType_GetRequest) (*EPCISMasterDataType_GetResponse, error) {
	response := new(EPCISMasterDataType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISMasterDataType_Get(request *EPCISMasterDataType_GetRequest) (*EPCISMasterDataType_GetResponse, error) {
	return service.EPCISMasterDataType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISMasterDataExtensionType_AddContext(ctx context.Context, request *EPCISMasterDataExtensionType_AddRequest) (*EPCISMasterDataExtensionType_AddResponse, error) {
	response := new(EPCISMasterDataExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISMasterDataExtensionType_Add(request *EPCISMasterDataExtensionType_AddRequest) (*EPCISMasterDataExtensionType_AddResponse, error) {
	return service.EPCISMasterDataExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISMasterDataExtensionType_GetContext(ctx context.Context, request *EPCISMasterDataExtensionType_GetRequest) (*EPCISMasterDataExtensionType_GetResponse, error) {
	response := new(EPCISMasterDataExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISMasterDataExtensionType_Get(request *EPCISMasterDataExtensionType_GetRequest) (*EPCISMasterDataExtensionType_GetResponse, error) {
	return service.EPCISMasterDataExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyListType_AddContext(ctx context.Context, request *VocabularyListType_AddRequest) (*VocabularyListType_AddResponse, error) {
	response := new(VocabularyListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyListType_Add(request *VocabularyListType_AddRequest) (*VocabularyListType_AddResponse, error) {
	return service.VocabularyListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyListType_GetContext(ctx context.Context, request *VocabularyListType_GetRequest) (*VocabularyListType_GetResponse, error) {
	response := new(VocabularyListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyListType_Get(request *VocabularyListType_GetRequest) (*VocabularyListType_GetResponse, error) {
	return service.VocabularyListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyType_AddContext(ctx context.Context, request *VocabularyType_AddRequest) (*VocabularyType_AddResponse, error) {
	response := new(VocabularyType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyType_Add(request *VocabularyType_AddRequest) (*VocabularyType_AddResponse, error) {
	return service.VocabularyType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyType_GetContext(ctx context.Context, request *VocabularyType_GetRequest) (*VocabularyType_GetResponse, error) {
	response := new(VocabularyType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyType_Get(request *VocabularyType_GetRequest) (*VocabularyType_GetResponse, error) {
	return service.VocabularyType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementListType_AddContext(ctx context.Context, request *VocabularyElementListType_AddRequest) (*VocabularyElementListType_AddResponse, error) {
	response := new(VocabularyElementListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementListType_Add(request *VocabularyElementListType_AddRequest) (*VocabularyElementListType_AddResponse, error) {
	return service.VocabularyElementListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementListType_GetContext(ctx context.Context, request *VocabularyElementListType_GetRequest) (*VocabularyElementListType_GetResponse, error) {
	response := new(VocabularyElementListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementListType_Get(request *VocabularyElementListType_GetRequest) (*VocabularyElementListType_GetResponse, error) {
	return service.VocabularyElementListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementType_AddContext(ctx context.Context, request *VocabularyElementType_AddRequest) (*VocabularyElementType_AddResponse, error) {
	response := new(VocabularyElementType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementType_Add(request *VocabularyElementType_AddRequest) (*VocabularyElementType_AddResponse, error) {
	return service.VocabularyElementType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementType_GetContext(ctx context.Context, request *VocabularyElementType_GetRequest) (*VocabularyElementType_GetResponse, error) {
	response := new(VocabularyElementType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementType_Get(request *VocabularyElementType_GetRequest) (*VocabularyElementType_GetResponse, error) {
	return service.VocabularyElementType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AttributeType_AddContext(ctx context.Context, request *AttributeType_AddRequest) (*AttributeType_AddResponse, error) {
	response := new(AttributeType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AttributeType_Add(request *AttributeType_AddRequest) (*AttributeType_AddResponse, error) {
	return service.AttributeType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AttributeType_GetContext(ctx context.Context, request *AttributeType_GetRequest) (*AttributeType_GetResponse, error) {
	response := new(AttributeType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AttributeType_Get(request *AttributeType_GetRequest) (*AttributeType_GetResponse, error) {
	return service.AttributeType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) IDListType_AddContext(ctx context.Context, request *IDListType_AddRequest) (*IDListType_AddResponse, error) {
	response := new(IDListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) IDListType_Add(request *IDListType_AddRequest) (*IDListType_AddResponse, error) {
	return service.IDListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) IDListType_GetContext(ctx context.Context, request *IDListType_GetRequest) (*IDListType_GetResponse, error) {
	response := new(IDListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) IDListType_Get(request *IDListType_GetRequest) (*IDListType_GetResponse, error) {
	return service.IDListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyExtensionType_AddContext(ctx context.Context, request *VocabularyExtensionType_AddRequest) (*VocabularyExtensionType_AddResponse, error) {
	response := new(VocabularyExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyExtensionType_Add(request *VocabularyExtensionType_AddRequest) (*VocabularyExtensionType_AddResponse, error) {
	return service.VocabularyExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyExtensionType_GetContext(ctx context.Context, request *VocabularyExtensionType_GetRequest) (*VocabularyExtensionType_GetResponse, error) {
	response := new(VocabularyExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyExtensionType_Get(request *VocabularyExtensionType_GetRequest) (*VocabularyExtensionType_GetResponse, error) {
	return service.VocabularyExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementExtensionType_AddContext(ctx context.Context, request *VocabularyElementExtensionType_AddRequest) (*VocabularyElementExtensionType_AddResponse, error) {
	response := new(VocabularyElementExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementExtensionType_Add(request *VocabularyElementExtensionType_AddRequest) (*VocabularyElementExtensionType_AddResponse, error) {
	return service.VocabularyElementExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VocabularyElementExtensionType_GetContext(ctx context.Context, request *VocabularyElementExtensionType_GetRequest) (*VocabularyElementExtensionType_GetResponse, error) {
	response := new(VocabularyElementExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VocabularyElementExtensionType_Get(request *VocabularyElementExtensionType_GetRequest) (*VocabularyElementExtensionType_GetResponse, error) {
	return service.VocabularyElementExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISBodyType_AddContext(ctx context.Context, request *EPCISBodyType_AddRequest) (*EPCISBodyType_AddResponse, error) {
	response := new(EPCISBodyType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISBodyType_Add(request *EPCISBodyType_AddRequest) (*EPCISBodyType_AddResponse, error) {
	return service.EPCISBodyType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISBodyType_GetContext(ctx context.Context, request *EPCISBodyType_GetRequest) (*EPCISBodyType_GetResponse, error) {
	response := new(EPCISBodyType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISBodyType_Get(request *EPCISBodyType_GetRequest) (*EPCISBodyType_GetResponse, error) {
	return service.EPCISBodyType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISBodyExtensionType_AddContext(ctx context.Context, request *EPCISBodyExtensionType_AddRequest) (*EPCISBodyExtensionType_AddResponse, error) {
	response := new(EPCISBodyExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISBodyExtensionType_Add(request *EPCISBodyExtensionType_AddRequest) (*EPCISBodyExtensionType_AddResponse, error) {
	return service.EPCISBodyExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISBodyExtensionType_GetContext(ctx context.Context, request *EPCISBodyExtensionType_GetRequest) (*EPCISBodyExtensionType_GetResponse, error) {
	response := new(EPCISBodyExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISBodyExtensionType_Get(request *EPCISBodyExtensionType_GetRequest) (*EPCISBodyExtensionType_GetResponse, error) {
	return service.EPCISBodyExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EventListType_AddContext(ctx context.Context, request *EventListType_AddRequest) (*EventListType_AddResponse, error) {
	response := new(EventListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EventListType_Add(request *EventListType_AddRequest) (*EventListType_AddResponse, error) {
	return service.EventListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EventListType_GetContext(ctx context.Context, request *EventListType_GetRequest) (*EventListType_GetResponse, error) {
	response := new(EventListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EventListType_Get(request *EventListType_GetRequest) (*EventListType_GetResponse, error) {
	return service.EventListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventListExtensionType_AddContext(ctx context.Context, request *EPCISEventListExtensionType_AddRequest) (*EPCISEventListExtensionType_AddResponse, error) {
	response := new(EPCISEventListExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventListExtensionType_Add(request *EPCISEventListExtensionType_AddRequest) (*EPCISEventListExtensionType_AddResponse, error) {
	return service.EPCISEventListExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventListExtensionType_GetContext(ctx context.Context, request *EPCISEventListExtensionType_GetRequest) (*EPCISEventListExtensionType_GetResponse, error) {
	response := new(EPCISEventListExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventListExtensionType_Get(request *EPCISEventListExtensionType_GetRequest) (*EPCISEventListExtensionType_GetResponse, error) {
	return service.EPCISEventListExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventListExtension2Type_AddContext(ctx context.Context, request *EPCISEventListExtension2Type_AddRequest) (*EPCISEventListExtension2Type_AddResponse, error) {
	response := new(EPCISEventListExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventListExtension2Type_Add(request *EPCISEventListExtension2Type_AddRequest) (*EPCISEventListExtension2Type_AddResponse, error) {
	return service.EPCISEventListExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventListExtension2Type_GetContext(ctx context.Context, request *EPCISEventListExtension2Type_GetRequest) (*EPCISEventListExtension2Type_GetResponse, error) {
	response := new(EPCISEventListExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventListExtension2Type_Get(request *EPCISEventListExtension2Type_GetRequest) (*EPCISEventListExtension2Type_GetResponse, error) {
	return service.EPCISEventListExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCListType_AddContext(ctx context.Context, request *EPCListType_AddRequest) (*EPCListType_AddResponse, error) {
	response := new(EPCListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCListType_Add(request *EPCListType_AddRequest) (*EPCListType_AddResponse, error) {
	return service.EPCListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCListType_GetContext(ctx context.Context, request *EPCListType_GetRequest) (*EPCListType_GetResponse, error) {
	response := new(EPCListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCListType_Get(request *EPCListType_GetRequest) (*EPCListType_GetResponse, error) {
	return service.EPCListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityElementType_AddContext(ctx context.Context, request *QuantityElementType_AddRequest) (*QuantityElementType_AddResponse, error) {
	response := new(QuantityElementType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityElementType_Add(request *QuantityElementType_AddRequest) (*QuantityElementType_AddResponse, error) {
	return service.QuantityElementType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityElementType_GetContext(ctx context.Context, request *QuantityElementType_GetRequest) (*QuantityElementType_GetResponse, error) {
	response := new(QuantityElementType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityElementType_Get(request *QuantityElementType_GetRequest) (*QuantityElementType_GetResponse, error) {
	return service.QuantityElementType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityListType_AddContext(ctx context.Context, request *QuantityListType_AddRequest) (*QuantityListType_AddResponse, error) {
	response := new(QuantityListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityListType_Add(request *QuantityListType_AddRequest) (*QuantityListType_AddResponse, error) {
	return service.QuantityListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityListType_GetContext(ctx context.Context, request *QuantityListType_GetRequest) (*QuantityListType_GetResponse, error) {
	response := new(QuantityListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityListType_Get(request *QuantityListType_GetRequest) (*QuantityListType_GetResponse, error) {
	return service.QuantityListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ReadPointType_AddContext(ctx context.Context, request *ReadPointType_AddRequest) (*ReadPointType_AddResponse, error) {
	response := new(ReadPointType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ReadPointType_Add(request *ReadPointType_AddRequest) (*ReadPointType_AddResponse, error) {
	return service.ReadPointType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ReadPointType_GetContext(ctx context.Context, request *ReadPointType_GetRequest) (*ReadPointType_GetResponse, error) {
	response := new(ReadPointType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ReadPointType_Get(request *ReadPointType_GetRequest) (*ReadPointType_GetResponse, error) {
	return service.ReadPointType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ReadPointExtensionType_AddContext(ctx context.Context, request *ReadPointExtensionType_AddRequest) (*ReadPointExtensionType_AddResponse, error) {
	response := new(ReadPointExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ReadPointExtensionType_Add(request *ReadPointExtensionType_AddRequest) (*ReadPointExtensionType_AddResponse, error) {
	return service.ReadPointExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ReadPointExtensionType_GetContext(ctx context.Context, request *ReadPointExtensionType_GetRequest) (*ReadPointExtensionType_GetResponse, error) {
	response := new(ReadPointExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ReadPointExtensionType_Get(request *ReadPointExtensionType_GetRequest) (*ReadPointExtensionType_GetResponse, error) {
	return service.ReadPointExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessLocationType_AddContext(ctx context.Context, request *BusinessLocationType_AddRequest) (*BusinessLocationType_AddResponse, error) {
	response := new(BusinessLocationType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessLocationType_Add(request *BusinessLocationType_AddRequest) (*BusinessLocationType_AddResponse, error) {
	return service.BusinessLocationType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessLocationType_GetContext(ctx context.Context, request *BusinessLocationType_GetRequest) (*BusinessLocationType_GetResponse, error) {
	response := new(BusinessLocationType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessLocationType_Get(request *BusinessLocationType_GetRequest) (*BusinessLocationType_GetResponse, error) {
	return service.BusinessLocationType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessLocationExtensionType_AddContext(ctx context.Context, request *BusinessLocationExtensionType_AddRequest) (*BusinessLocationExtensionType_AddResponse, error) {
	response := new(BusinessLocationExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessLocationExtensionType_Add(request *BusinessLocationExtensionType_AddRequest) (*BusinessLocationExtensionType_AddResponse, error) {
	return service.BusinessLocationExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessLocationExtensionType_GetContext(ctx context.Context, request *BusinessLocationExtensionType_GetRequest) (*BusinessLocationExtensionType_GetResponse, error) {
	response := new(BusinessLocationExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessLocationExtensionType_Get(request *BusinessLocationExtensionType_GetRequest) (*BusinessLocationExtensionType_GetResponse, error) {
	return service.BusinessLocationExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessTransactionType_AddContext(ctx context.Context, request *BusinessTransactionType_AddRequest) (*BusinessTransactionType_AddResponse, error) {
	response := new(BusinessTransactionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessTransactionType_Add(request *BusinessTransactionType_AddRequest) (*BusinessTransactionType_AddResponse, error) {
	return service.BusinessTransactionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessTransactionType_GetContext(ctx context.Context, request *BusinessTransactionType_GetRequest) (*BusinessTransactionType_GetResponse, error) {
	response := new(BusinessTransactionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessTransactionType_Get(request *BusinessTransactionType_GetRequest) (*BusinessTransactionType_GetResponse, error) {
	return service.BusinessTransactionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessTransactionListType_AddContext(ctx context.Context, request *BusinessTransactionListType_AddRequest) (*BusinessTransactionListType_AddResponse, error) {
	response := new(BusinessTransactionListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessTransactionListType_Add(request *BusinessTransactionListType_AddRequest) (*BusinessTransactionListType_AddResponse, error) {
	return service.BusinessTransactionListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) BusinessTransactionListType_GetContext(ctx context.Context, request *BusinessTransactionListType_GetRequest) (*BusinessTransactionListType_GetResponse, error) {
	response := new(BusinessTransactionListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) BusinessTransactionListType_Get(request *BusinessTransactionListType_GetRequest) (*BusinessTransactionListType_GetResponse, error) {
	return service.BusinessTransactionListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SourceDestType_AddContext(ctx context.Context, request *SourceDestType_AddRequest) (*SourceDestType_AddResponse, error) {
	response := new(SourceDestType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SourceDestType_Add(request *SourceDestType_AddRequest) (*SourceDestType_AddResponse, error) {
	return service.SourceDestType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SourceDestType_GetContext(ctx context.Context, request *SourceDestType_GetRequest) (*SourceDestType_GetResponse, error) {
	response := new(SourceDestType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SourceDestType_Get(request *SourceDestType_GetRequest) (*SourceDestType_GetResponse, error) {
	return service.SourceDestType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SourceListType_AddContext(ctx context.Context, request *SourceListType_AddRequest) (*SourceListType_AddResponse, error) {
	response := new(SourceListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SourceListType_Add(request *SourceListType_AddRequest) (*SourceListType_AddResponse, error) {
	return service.SourceListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SourceListType_GetContext(ctx context.Context, request *SourceListType_GetRequest) (*SourceListType_GetResponse, error) {
	response := new(SourceListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SourceListType_Get(request *SourceListType_GetRequest) (*SourceListType_GetResponse, error) {
	return service.SourceListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DestinationListType_AddContext(ctx context.Context, request *DestinationListType_AddRequest) (*DestinationListType_AddResponse, error) {
	response := new(DestinationListType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DestinationListType_Add(request *DestinationListType_AddRequest) (*DestinationListType_AddResponse, error) {
	return service.DestinationListType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DestinationListType_GetContext(ctx context.Context, request *DestinationListType_GetRequest) (*DestinationListType_GetResponse, error) {
	response := new(DestinationListType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DestinationListType_Get(request *DestinationListType_GetRequest) (*DestinationListType_GetResponse, error) {
	return service.DestinationListType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ILMDType_AddContext(ctx context.Context, request *ILMDType_AddRequest) (*ILMDType_AddResponse, error) {
	response := new(ILMDType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ILMDType_Add(request *ILMDType_AddRequest) (*ILMDType_AddResponse, error) {
	return service.ILMDType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ILMDType_GetContext(ctx context.Context, request *ILMDType_GetRequest) (*ILMDType_GetResponse, error) {
	response := new(ILMDType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ILMDType_Get(request *ILMDType_GetRequest) (*ILMDType_GetResponse, error) {
	return service.ILMDType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ILMDExtensionType_AddContext(ctx context.Context, request *ILMDExtensionType_AddRequest) (*ILMDExtensionType_AddResponse, error) {
	response := new(ILMDExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ILMDExtensionType_Add(request *ILMDExtensionType_AddRequest) (*ILMDExtensionType_AddResponse, error) {
	return service.ILMDExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ILMDExtensionType_GetContext(ctx context.Context, request *ILMDExtensionType_GetRequest) (*ILMDExtensionType_GetResponse, error) {
	response := new(ILMDExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ILMDExtensionType_Get(request *ILMDExtensionType_GetRequest) (*ILMDExtensionType_GetResponse, error) {
	return service.ILMDExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) CorrectiveEventIDsType_AddContext(ctx context.Context, request *CorrectiveEventIDsType_AddRequest) (*CorrectiveEventIDsType_AddResponse, error) {
	response := new(CorrectiveEventIDsType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) CorrectiveEventIDsType_Add(request *CorrectiveEventIDsType_AddRequest) (*CorrectiveEventIDsType_AddResponse, error) {
	return service.CorrectiveEventIDsType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) CorrectiveEventIDsType_GetContext(ctx context.Context, request *CorrectiveEventIDsType_GetRequest) (*CorrectiveEventIDsType_GetResponse, error) {
	response := new(CorrectiveEventIDsType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) CorrectiveEventIDsType_Get(request *CorrectiveEventIDsType_GetRequest) (*CorrectiveEventIDsType_GetResponse, error) {
	return service.CorrectiveEventIDsType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ErrorDeclarationType_AddContext(ctx context.Context, request *ErrorDeclarationType_AddRequest) (*ErrorDeclarationType_AddResponse, error) {
	response := new(ErrorDeclarationType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ErrorDeclarationType_Add(request *ErrorDeclarationType_AddRequest) (*ErrorDeclarationType_AddResponse, error) {
	return service.ErrorDeclarationType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ErrorDeclarationType_GetContext(ctx context.Context, request *ErrorDeclarationType_GetRequest) (*ErrorDeclarationType_GetResponse, error) {
	response := new(ErrorDeclarationType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ErrorDeclarationType_Get(request *ErrorDeclarationType_GetRequest) (*ErrorDeclarationType_GetResponse, error) {
	return service.ErrorDeclarationType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ErrorDeclarationExtensionType_AddContext(ctx context.Context, request *ErrorDeclarationExtensionType_AddRequest) (*ErrorDeclarationExtensionType_AddResponse, error) {
	response := new(ErrorDeclarationExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ErrorDeclarationExtensionType_Add(request *ErrorDeclarationExtensionType_AddRequest) (*ErrorDeclarationExtensionType_AddResponse, error) {
	return service.ErrorDeclarationExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ErrorDeclarationExtensionType_GetContext(ctx context.Context, request *ErrorDeclarationExtensionType_GetRequest) (*ErrorDeclarationExtensionType_GetResponse, error) {
	response := new(ErrorDeclarationExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ErrorDeclarationExtensionType_Get(request *ErrorDeclarationExtensionType_GetRequest) (*ErrorDeclarationExtensionType_GetResponse, error) {
	return service.ErrorDeclarationExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventType_AddContext(ctx context.Context, request *EPCISEventType_AddRequest) (*EPCISEventType_AddResponse, error) {
	response := new(EPCISEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventType_Add(request *EPCISEventType_AddRequest) (*EPCISEventType_AddResponse, error) {
	return service.EPCISEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventType_GetContext(ctx context.Context, request *EPCISEventType_GetRequest) (*EPCISEventType_GetResponse, error) {
	response := new(EPCISEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventType_Get(request *EPCISEventType_GetRequest) (*EPCISEventType_GetResponse, error) {
	return service.EPCISEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventExtensionType_AddContext(ctx context.Context, request *EPCISEventExtensionType_AddRequest) (*EPCISEventExtensionType_AddResponse, error) {
	response := new(EPCISEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventExtensionType_Add(request *EPCISEventExtensionType_AddRequest) (*EPCISEventExtensionType_AddResponse, error) {
	return service.EPCISEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventExtensionType_GetContext(ctx context.Context, request *EPCISEventExtensionType_GetRequest) (*EPCISEventExtensionType_GetResponse, error) {
	response := new(EPCISEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventExtensionType_Get(request *EPCISEventExtensionType_GetRequest) (*EPCISEventExtensionType_GetResponse, error) {
	return service.EPCISEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventExtension2Type_AddContext(ctx context.Context, request *EPCISEventExtension2Type_AddRequest) (*EPCISEventExtension2Type_AddResponse, error) {
	response := new(EPCISEventExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventExtension2Type_Add(request *EPCISEventExtension2Type_AddRequest) (*EPCISEventExtension2Type_AddResponse, error) {
	return service.EPCISEventExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISEventExtension2Type_GetContext(ctx context.Context, request *EPCISEventExtension2Type_GetRequest) (*EPCISEventExtension2Type_GetResponse, error) {
	response := new(EPCISEventExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISEventExtension2Type_Get(request *EPCISEventExtension2Type_GetRequest) (*EPCISEventExtension2Type_GetResponse, error) {
	return service.EPCISEventExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventType_AddContext(ctx context.Context, request *ObjectEventType_AddRequest) (*ObjectEventType_AddResponse, error) {
	response := new(ObjectEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventType_Add(request *ObjectEventType_AddRequest) (*ObjectEventType_AddResponse, error) {
	return service.ObjectEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventType_GetContext(ctx context.Context, request *ObjectEventType_GetRequest) (*ObjectEventType_GetResponse, error) {
	response := new(ObjectEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventType_Get(request *ObjectEventType_GetRequest) (*ObjectEventType_GetResponse, error) {
	return service.ObjectEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventExtensionType_AddContext(ctx context.Context, request *ObjectEventExtensionType_AddRequest) (*ObjectEventExtensionType_AddResponse, error) {
	response := new(ObjectEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventExtensionType_Add(request *ObjectEventExtensionType_AddRequest) (*ObjectEventExtensionType_AddResponse, error) {
	return service.ObjectEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventExtensionType_GetContext(ctx context.Context, request *ObjectEventExtensionType_GetRequest) (*ObjectEventExtensionType_GetResponse, error) {
	response := new(ObjectEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventExtensionType_Get(request *ObjectEventExtensionType_GetRequest) (*ObjectEventExtensionType_GetResponse, error) {
	return service.ObjectEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventExtension2Type_AddContext(ctx context.Context, request *ObjectEventExtension2Type_AddRequest) (*ObjectEventExtension2Type_AddResponse, error) {
	response := new(ObjectEventExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventExtension2Type_Add(request *ObjectEventExtension2Type_AddRequest) (*ObjectEventExtension2Type_AddResponse, error) {
	return service.ObjectEventExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ObjectEventExtension2Type_GetContext(ctx context.Context, request *ObjectEventExtension2Type_GetRequest) (*ObjectEventExtension2Type_GetResponse, error) {
	response := new(ObjectEventExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ObjectEventExtension2Type_Get(request *ObjectEventExtension2Type_GetRequest) (*ObjectEventExtension2Type_GetResponse, error) {
	return service.ObjectEventExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventType_AddContext(ctx context.Context, request *AggregationEventType_AddRequest) (*AggregationEventType_AddResponse, error) {
	response := new(AggregationEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventType_Add(request *AggregationEventType_AddRequest) (*AggregationEventType_AddResponse, error) {
	return service.AggregationEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventType_GetContext(ctx context.Context, request *AggregationEventType_GetRequest) (*AggregationEventType_GetResponse, error) {
	response := new(AggregationEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventType_Get(request *AggregationEventType_GetRequest) (*AggregationEventType_GetResponse, error) {
	return service.AggregationEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventExtensionType_AddContext(ctx context.Context, request *AggregationEventExtensionType_AddRequest) (*AggregationEventExtensionType_AddResponse, error) {
	response := new(AggregationEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventExtensionType_Add(request *AggregationEventExtensionType_AddRequest) (*AggregationEventExtensionType_AddResponse, error) {
	return service.AggregationEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventExtensionType_GetContext(ctx context.Context, request *AggregationEventExtensionType_GetRequest) (*AggregationEventExtensionType_GetResponse, error) {
	response := new(AggregationEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventExtensionType_Get(request *AggregationEventExtensionType_GetRequest) (*AggregationEventExtensionType_GetResponse, error) {
	return service.AggregationEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventExtension2Type_AddContext(ctx context.Context, request *AggregationEventExtension2Type_AddRequest) (*AggregationEventExtension2Type_AddResponse, error) {
	response := new(AggregationEventExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventExtension2Type_Add(request *AggregationEventExtension2Type_AddRequest) (*AggregationEventExtension2Type_AddResponse, error) {
	return service.AggregationEventExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) AggregationEventExtension2Type_GetContext(ctx context.Context, request *AggregationEventExtension2Type_GetRequest) (*AggregationEventExtension2Type_GetResponse, error) {
	response := new(AggregationEventExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) AggregationEventExtension2Type_Get(request *AggregationEventExtension2Type_GetRequest) (*AggregationEventExtension2Type_GetResponse, error) {
	return service.AggregationEventExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityEventType_AddContext(ctx context.Context, request *QuantityEventType_AddRequest) (*QuantityEventType_AddResponse, error) {
	response := new(QuantityEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityEventType_Add(request *QuantityEventType_AddRequest) (*QuantityEventType_AddResponse, error) {
	return service.QuantityEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityEventType_GetContext(ctx context.Context, request *QuantityEventType_GetRequest) (*QuantityEventType_GetResponse, error) {
	response := new(QuantityEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityEventType_Get(request *QuantityEventType_GetRequest) (*QuantityEventType_GetResponse, error) {
	return service.QuantityEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityEventExtensionType_AddContext(ctx context.Context, request *QuantityEventExtensionType_AddRequest) (*QuantityEventExtensionType_AddResponse, error) {
	response := new(QuantityEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityEventExtensionType_Add(request *QuantityEventExtensionType_AddRequest) (*QuantityEventExtensionType_AddResponse, error) {
	return service.QuantityEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuantityEventExtensionType_GetContext(ctx context.Context, request *QuantityEventExtensionType_GetRequest) (*QuantityEventExtensionType_GetResponse, error) {
	response := new(QuantityEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuantityEventExtensionType_Get(request *QuantityEventExtensionType_GetRequest) (*QuantityEventExtensionType_GetResponse, error) {
	return service.QuantityEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventType_AddContext(ctx context.Context, request *TransactionEventType_AddRequest) (*TransactionEventType_AddResponse, error) {
	response := new(TransactionEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventType_Add(request *TransactionEventType_AddRequest) (*TransactionEventType_AddResponse, error) {
	return service.TransactionEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventType_GetContext(ctx context.Context, request *TransactionEventType_GetRequest) (*TransactionEventType_GetResponse, error) {
	response := new(TransactionEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventType_Get(request *TransactionEventType_GetRequest) (*TransactionEventType_GetResponse, error) {
	return service.TransactionEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventExtensionType_AddContext(ctx context.Context, request *TransactionEventExtensionType_AddRequest) (*TransactionEventExtensionType_AddResponse, error) {
	response := new(TransactionEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventExtensionType_Add(request *TransactionEventExtensionType_AddRequest) (*TransactionEventExtensionType_AddResponse, error) {
	return service.TransactionEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventExtensionType_GetContext(ctx context.Context, request *TransactionEventExtensionType_GetRequest) (*TransactionEventExtensionType_GetResponse, error) {
	response := new(TransactionEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventExtensionType_Get(request *TransactionEventExtensionType_GetRequest) (*TransactionEventExtensionType_GetResponse, error) {
	return service.TransactionEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventExtension2Type_AddContext(ctx context.Context, request *TransactionEventExtension2Type_AddRequest) (*TransactionEventExtension2Type_AddResponse, error) {
	response := new(TransactionEventExtension2Type_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventExtension2Type_Add(request *TransactionEventExtension2Type_AddRequest) (*TransactionEventExtension2Type_AddResponse, error) {
	return service.TransactionEventExtension2Type_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransactionEventExtension2Type_GetContext(ctx context.Context, request *TransactionEventExtension2Type_GetRequest) (*TransactionEventExtension2Type_GetResponse, error) {
	response := new(TransactionEventExtension2Type_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransactionEventExtension2Type_Get(request *TransactionEventExtension2Type_GetRequest) (*TransactionEventExtension2Type_GetResponse, error) {
	return service.TransactionEventExtension2Type_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransformationEventType_AddContext(ctx context.Context, request *TransformationEventType_AddRequest) (*TransformationEventType_AddResponse, error) {
	response := new(TransformationEventType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransformationEventType_Add(request *TransformationEventType_AddRequest) (*TransformationEventType_AddResponse, error) {
	return service.TransformationEventType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransformationEventType_GetContext(ctx context.Context, request *TransformationEventType_GetRequest) (*TransformationEventType_GetResponse, error) {
	response := new(TransformationEventType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransformationEventType_Get(request *TransformationEventType_GetRequest) (*TransformationEventType_GetResponse, error) {
	return service.TransformationEventType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransformationEventExtensionType_AddContext(ctx context.Context, request *TransformationEventExtensionType_AddRequest) (*TransformationEventExtensionType_AddResponse, error) {
	response := new(TransformationEventExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransformationEventExtensionType_Add(request *TransformationEventExtensionType_AddRequest) (*TransformationEventExtensionType_AddResponse, error) {
	return service.TransformationEventExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) TransformationEventExtensionType_GetContext(ctx context.Context, request *TransformationEventExtensionType_GetRequest) (*TransformationEventExtensionType_GetResponse, error) {
	response := new(TransformationEventExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) TransformationEventExtensionType_Get(request *TransformationEventExtensionType_GetRequest) (*TransformationEventExtensionType_GetResponse, error) {
	return service.TransformationEventExtensionType_GetContext(
		context.Background(),
		request,
	)
}

type ImplementationExceptionSeverity NCName

const (
	ImplementationExceptionSeverityERROR ImplementationExceptionSeverity = "ERROR"

	ImplementationExceptionSeveritySEVERE ImplementationExceptionSeverity = "SEVERE"
)

type EPCISQueryDocument EPCISQueryDocumentType

type GetQueryNames EmptyParms

type GetQueryNamesResult ArrayOfString

type SubscribeResult VoidHolder

type UnsubscribeResult VoidHolder

type GetSubscriptionIDsResult ArrayOfString

type GetStandardVersion EmptyParms

type GetStandardVersionResult string

type GetVendorVersion EmptyParms

type GetVendorVersionResult string

type EPCISQueryDocumentType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISQueryDocumentType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryDocumentType_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *EPCISQueryDocumentType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISQueryDocumentType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISQueryDocumentType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISQueryDocumentType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *EPCISQueryDocumentType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISQueryDocumentType_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISQueryDocumentType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryDocumentExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                         `xml:"add"`
	XmlNSXSI string                           `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                           `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                           `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISQueryDocumentExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryDocumentExtensionType_AddResponse struct {
	XMLName       xml.Name                                       `xml:"addResponse"`
	WriteResponse *EPCISQueryDocumentExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISQueryDocumentExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISQueryDocumentExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISQueryDocumentExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                      `xml:"getResponse"`
	ReadResponse *EPCISQueryDocumentExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISQueryDocumentExtensionType_ReadResponse struct {
	XMLName xml.Name                         `xml:"readResponse"`
	Status  *Status                          `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISQueryDocumentExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryBodyType_AddRequest struct {
	/* Here */
	XMLName  xml.Name            `xml:"add"`
	XmlNSXSI string              `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string              `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string              `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISQueryBodyType `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryBodyType_AddResponse struct {
	XMLName       xml.Name                          `xml:"addResponse"`
	WriteResponse *EPCISQueryBodyType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISQueryBodyType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISQueryBodyType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISQueryBodyType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                         `xml:"getResponse"`
	ReadResponse *EPCISQueryBodyType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISQueryBodyType_ReadResponse struct {
	XMLName xml.Name            `xml:"readResponse"`
	Status  *Status             `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISQueryBodyType `xml:"record,omitempty" json:"record,omitempty"`
}

type Subscribe_AddRequest struct {
	/* Here */
	XMLName  xml.Name   `xml:"add"`
	XmlNSXSI string     `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string     `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string     `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Subscribe `xml:"record,omitempty" json:"record,omitempty"`
}

type Subscribe_AddResponse struct {
	XMLName       xml.Name                 `xml:"addResponse"`
	WriteResponse *Subscribe_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Subscribe_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Subscribe_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Subscribe_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                `xml:"getResponse"`
	ReadResponse *Subscribe_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Subscribe_ReadResponse struct {
	XMLName xml.Name   `xml:"readResponse"`
	Status  *Status    `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Subscribe `xml:"record,omitempty" json:"record,omitempty"`
}

type Unsubscribe_AddRequest struct {
	/* Here */
	XMLName  xml.Name     `xml:"add"`
	XmlNSXSI string       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Unsubscribe `xml:"record,omitempty" json:"record,omitempty"`
}

type Unsubscribe_AddResponse struct {
	XMLName       xml.Name                   `xml:"addResponse"`
	WriteResponse *Unsubscribe_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Unsubscribe_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Unsubscribe_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Unsubscribe_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                  `xml:"getResponse"`
	ReadResponse *Unsubscribe_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Unsubscribe_ReadResponse struct {
	XMLName xml.Name     `xml:"readResponse"`
	Status  *Status      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Unsubscribe `xml:"record,omitempty" json:"record,omitempty"`
}

type GetSubscriptionIDs_AddRequest struct {
	/* Here */
	XMLName  xml.Name            `xml:"add"`
	XmlNSXSI string              `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string              `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string              `xml:"xmlns:ns1,attr,omitempty"`
	Record   *GetSubscriptionIDs `xml:"record,omitempty" json:"record,omitempty"`
}

type GetSubscriptionIDs_AddResponse struct {
	XMLName       xml.Name                          `xml:"addResponse"`
	WriteResponse *GetSubscriptionIDs_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type GetSubscriptionIDs_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type GetSubscriptionIDs_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type GetSubscriptionIDs_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                         `xml:"getResponse"`
	ReadResponse *GetSubscriptionIDs_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type GetSubscriptionIDs_ReadResponse struct {
	XMLName xml.Name            `xml:"readResponse"`
	Status  *Status             `xml:"status,omitempty" json:"status,omitempty"`
	Record  *GetSubscriptionIDs `xml:"record,omitempty" json:"record,omitempty"`
}

type Poll_AddRequest struct {
	/* Here */
	XMLName  xml.Name `xml:"add"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *Poll    `xml:"record,omitempty" json:"record,omitempty"`
}

type Poll_AddResponse struct {
	XMLName       xml.Name            `xml:"addResponse"`
	WriteResponse *Poll_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type Poll_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type Poll_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type Poll_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name           `xml:"getResponse"`
	ReadResponse *Poll_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type Poll_ReadResponse struct {
	XMLName xml.Name `xml:"readResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *Poll    `xml:"record,omitempty" json:"record,omitempty"`
}

type VoidHolder_AddRequest struct {
	/* Here */
	XMLName  xml.Name    `xml:"add"`
	XmlNSXSI string      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *VoidHolder `xml:"record,omitempty" json:"record,omitempty"`
}

type VoidHolder_AddResponse struct {
	XMLName       xml.Name                  `xml:"addResponse"`
	WriteResponse *VoidHolder_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type VoidHolder_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type VoidHolder_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type VoidHolder_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                 `xml:"getResponse"`
	ReadResponse *VoidHolder_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type VoidHolder_ReadResponse struct {
	XMLName xml.Name    `xml:"readResponse"`
	Status  *Status     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *VoidHolder `xml:"record,omitempty" json:"record,omitempty"`
}

type EmptyParms_AddRequest struct {
	/* Here */
	XMLName  xml.Name    `xml:"add"`
	XmlNSXSI string      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EmptyParms `xml:"record,omitempty" json:"record,omitempty"`
}

type EmptyParms_AddResponse struct {
	XMLName       xml.Name                  `xml:"addResponse"`
	WriteResponse *EmptyParms_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EmptyParms_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EmptyParms_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EmptyParms_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                 `xml:"getResponse"`
	ReadResponse *EmptyParms_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EmptyParms_ReadResponse struct {
	XMLName xml.Name    `xml:"readResponse"`
	Status  *Status     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EmptyParms `xml:"record,omitempty" json:"record,omitempty"`
}

type ArrayOfString_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ArrayOfString `xml:"record,omitempty" json:"record,omitempty"`
}

type ArrayOfString_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *ArrayOfString_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ArrayOfString_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ArrayOfString_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ArrayOfString_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *ArrayOfString_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ArrayOfString_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ArrayOfString `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControls_AddRequest struct {
	/* Here */
	XMLName  xml.Name              `xml:"add"`
	XmlNSXSI string                `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SubscriptionControls `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControls_AddResponse struct {
	XMLName       xml.Name                            `xml:"addResponse"`
	WriteResponse *SubscriptionControls_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SubscriptionControls_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SubscriptionControls_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SubscriptionControls_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                           `xml:"getResponse"`
	ReadResponse *SubscriptionControls_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SubscriptionControls_ReadResponse struct {
	XMLName xml.Name              `xml:"readResponse"`
	Status  *Status               `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SubscriptionControls `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControlsExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                           `xml:"add"`
	XmlNSXSI string                             `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                             `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                             `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SubscriptionControlsExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControlsExtensionType_AddResponse struct {
	XMLName       xml.Name                                         `xml:"addResponse"`
	WriteResponse *SubscriptionControlsExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SubscriptionControlsExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SubscriptionControlsExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SubscriptionControlsExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                        `xml:"getResponse"`
	ReadResponse *SubscriptionControlsExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SubscriptionControlsExtensionType_ReadResponse struct {
	XMLName xml.Name                           `xml:"readResponse"`
	Status  *Status                            `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SubscriptionControlsExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QuerySchedule_AddRequest struct {
	/* Here */
	XMLName  xml.Name       `xml:"add"`
	XmlNSXSI string         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QuerySchedule `xml:"record,omitempty" json:"record,omitempty"`
}

type QuerySchedule_AddResponse struct {
	XMLName       xml.Name                     `xml:"addResponse"`
	WriteResponse *QuerySchedule_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QuerySchedule_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QuerySchedule_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QuerySchedule_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                    `xml:"getResponse"`
	ReadResponse *QuerySchedule_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QuerySchedule_ReadResponse struct {
	XMLName xml.Name       `xml:"readResponse"`
	Status  *Status        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QuerySchedule `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryScheduleExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                    `xml:"add"`
	XmlNSXSI string                      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryScheduleExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryScheduleExtensionType_AddResponse struct {
	XMLName       xml.Name                                  `xml:"addResponse"`
	WriteResponse *QueryScheduleExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryScheduleExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryScheduleExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryScheduleExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                 `xml:"getResponse"`
	ReadResponse *QueryScheduleExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryScheduleExtensionType_ReadResponse struct {
	XMLName xml.Name                    `xml:"readResponse"`
	Status  *Status                     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryScheduleExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParams_AddRequest struct {
	/* Here */
	XMLName  xml.Name     `xml:"add"`
	XmlNSXSI string       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryParams `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParams_AddResponse struct {
	XMLName       xml.Name                   `xml:"addResponse"`
	WriteResponse *QueryParams_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryParams_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryParams_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryParams_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                  `xml:"getResponse"`
	ReadResponse *QueryParams_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryParams_ReadResponse struct {
	XMLName xml.Name     `xml:"readResponse"`
	Status  *Status      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryParams `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParam_AddRequest struct {
	/* Here */
	XMLName  xml.Name    `xml:"add"`
	XmlNSXSI string      `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string      `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string      `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryParam `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParam_AddResponse struct {
	XMLName       xml.Name                  `xml:"addResponse"`
	WriteResponse *QueryParam_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryParam_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryParam_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryParam_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                 `xml:"getResponse"`
	ReadResponse *QueryParam_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryParam_ReadResponse struct {
	XMLName xml.Name    `xml:"readResponse"`
	Status  *Status     `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryParam `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResults_AddRequest struct {
	/* Here */
	XMLName  xml.Name      `xml:"add"`
	XmlNSXSI string        `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string        `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string        `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryResults `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResults_AddResponse struct {
	XMLName       xml.Name                    `xml:"addResponse"`
	WriteResponse *QueryResults_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryResults_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryResults_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryResults_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                   `xml:"getResponse"`
	ReadResponse *QueryResults_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryResults_ReadResponse struct {
	XMLName xml.Name      `xml:"readResponse"`
	Status  *Status       `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryResults `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResultsExtensionType_AddRequest struct {
	/* Here */
	XMLName  xml.Name                   `xml:"add"`
	XmlNSXSI string                     `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                     `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                     `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryResultsExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResultsExtensionType_AddResponse struct {
	XMLName       xml.Name                                 `xml:"addResponse"`
	WriteResponse *QueryResultsExtensionType_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryResultsExtensionType_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryResultsExtensionType_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryResultsExtensionType_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                `xml:"getResponse"`
	ReadResponse *QueryResultsExtensionType_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryResultsExtensionType_ReadResponse struct {
	XMLName xml.Name                   `xml:"readResponse"`
	Status  *Status                    `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryResultsExtensionType `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResultsBody_AddRequest struct {
	/* Here */
	XMLName  xml.Name          `xml:"add"`
	XmlNSXSI string            `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string            `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string            `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryResultsBody `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryResultsBody_AddResponse struct {
	XMLName       xml.Name                        `xml:"addResponse"`
	WriteResponse *QueryResultsBody_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryResultsBody_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryResultsBody_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryResultsBody_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                       `xml:"getResponse"`
	ReadResponse *QueryResultsBody_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryResultsBody_ReadResponse struct {
	XMLName xml.Name          `xml:"readResponse"`
	Status  *Status           `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryResultsBody `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISException_AddRequest struct {
	/* Here */
	XMLName  xml.Name        `xml:"add"`
	XmlNSXSI string          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *EPCISException `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISException_AddResponse struct {
	XMLName       xml.Name                      `xml:"addResponse"`
	WriteResponse *EPCISException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type EPCISException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type EPCISException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type EPCISException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                     `xml:"getResponse"`
	ReadResponse *EPCISException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type EPCISException_ReadResponse struct {
	XMLName xml.Name        `xml:"readResponse"`
	Status  *Status         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *EPCISException `xml:"record,omitempty" json:"record,omitempty"`
}

type DuplicateNameException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *DuplicateNameException `xml:"record,omitempty" json:"record,omitempty"`
}

type DuplicateNameException_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *DuplicateNameException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type DuplicateNameException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type DuplicateNameException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type DuplicateNameException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *DuplicateNameException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type DuplicateNameException_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *DuplicateNameException `xml:"record,omitempty" json:"record,omitempty"`
}

type InvalidURIException_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *InvalidURIException `xml:"record,omitempty" json:"record,omitempty"`
}

type InvalidURIException_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *InvalidURIException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type InvalidURIException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type InvalidURIException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type InvalidURIException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *InvalidURIException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type InvalidURIException_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *InvalidURIException `xml:"record,omitempty" json:"record,omitempty"`
}

type NoSuchNameException_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *NoSuchNameException `xml:"record,omitempty" json:"record,omitempty"`
}

type NoSuchNameException_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *NoSuchNameException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type NoSuchNameException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type NoSuchNameException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type NoSuchNameException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *NoSuchNameException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type NoSuchNameException_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *NoSuchNameException `xml:"record,omitempty" json:"record,omitempty"`
}

type NoSuchSubscriptionException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                     `xml:"add"`
	XmlNSXSI string                       `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                       `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                       `xml:"xmlns:ns1,attr,omitempty"`
	Record   *NoSuchSubscriptionException `xml:"record,omitempty" json:"record,omitempty"`
}

type NoSuchSubscriptionException_AddResponse struct {
	XMLName       xml.Name                                   `xml:"addResponse"`
	WriteResponse *NoSuchSubscriptionException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type NoSuchSubscriptionException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type NoSuchSubscriptionException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type NoSuchSubscriptionException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                  `xml:"getResponse"`
	ReadResponse *NoSuchSubscriptionException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type NoSuchSubscriptionException_ReadResponse struct {
	XMLName xml.Name                     `xml:"readResponse"`
	Status  *Status                      `xml:"status,omitempty" json:"status,omitempty"`
	Record  *NoSuchSubscriptionException `xml:"record,omitempty" json:"record,omitempty"`
}

type DuplicateSubscriptionException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *DuplicateSubscriptionException `xml:"record,omitempty" json:"record,omitempty"`
}

type DuplicateSubscriptionException_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *DuplicateSubscriptionException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type DuplicateSubscriptionException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type DuplicateSubscriptionException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type DuplicateSubscriptionException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *DuplicateSubscriptionException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type DuplicateSubscriptionException_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *DuplicateSubscriptionException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParameterException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryParameterException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryParameterException_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *QueryParameterException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryParameterException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryParameterException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryParameterException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *QueryParameterException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryParameterException_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryParameterException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryTooLargeException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                `xml:"add"`
	XmlNSXSI string                  `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                  `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                  `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryTooLargeException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryTooLargeException_AddResponse struct {
	XMLName       xml.Name                              `xml:"addResponse"`
	WriteResponse *QueryTooLargeException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryTooLargeException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryTooLargeException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryTooLargeException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                             `xml:"getResponse"`
	ReadResponse *QueryTooLargeException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryTooLargeException_ReadResponse struct {
	XMLName xml.Name                `xml:"readResponse"`
	Status  *Status                 `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryTooLargeException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryTooComplexException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                  `xml:"add"`
	XmlNSXSI string                    `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                    `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                    `xml:"xmlns:ns1,attr,omitempty"`
	Record   *QueryTooComplexException `xml:"record,omitempty" json:"record,omitempty"`
}

type QueryTooComplexException_AddResponse struct {
	XMLName       xml.Name                                `xml:"addResponse"`
	WriteResponse *QueryTooComplexException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type QueryTooComplexException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type QueryTooComplexException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type QueryTooComplexException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                               `xml:"getResponse"`
	ReadResponse *QueryTooComplexException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type QueryTooComplexException_ReadResponse struct {
	XMLName xml.Name                  `xml:"readResponse"`
	Status  *Status                   `xml:"status,omitempty" json:"status,omitempty"`
	Record  *QueryTooComplexException `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControlsException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                       `xml:"add"`
	XmlNSXSI string                         `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                         `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                         `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SubscriptionControlsException `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscriptionControlsException_AddResponse struct {
	XMLName       xml.Name                                     `xml:"addResponse"`
	WriteResponse *SubscriptionControlsException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SubscriptionControlsException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SubscriptionControlsException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SubscriptionControlsException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                    `xml:"getResponse"`
	ReadResponse *SubscriptionControlsException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SubscriptionControlsException_ReadResponse struct {
	XMLName xml.Name                       `xml:"readResponse"`
	Status  *Status                        `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SubscriptionControlsException `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscribeNotPermittedException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                        `xml:"add"`
	XmlNSXSI string                          `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                          `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                          `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SubscribeNotPermittedException `xml:"record,omitempty" json:"record,omitempty"`
}

type SubscribeNotPermittedException_AddResponse struct {
	XMLName       xml.Name                                      `xml:"addResponse"`
	WriteResponse *SubscribeNotPermittedException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SubscribeNotPermittedException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SubscribeNotPermittedException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SubscribeNotPermittedException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                                     `xml:"getResponse"`
	ReadResponse *SubscribeNotPermittedException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SubscribeNotPermittedException_ReadResponse struct {
	XMLName xml.Name                        `xml:"readResponse"`
	Status  *Status                         `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SubscribeNotPermittedException `xml:"record,omitempty" json:"record,omitempty"`
}

type SecurityException_AddRequest struct {
	/* Here */
	XMLName  xml.Name           `xml:"add"`
	XmlNSXSI string             `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string             `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string             `xml:"xmlns:ns1,attr,omitempty"`
	Record   *SecurityException `xml:"record,omitempty" json:"record,omitempty"`
}

type SecurityException_AddResponse struct {
	XMLName       xml.Name                         `xml:"addResponse"`
	WriteResponse *SecurityException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type SecurityException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type SecurityException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type SecurityException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                        `xml:"getResponse"`
	ReadResponse *SecurityException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type SecurityException_ReadResponse struct {
	XMLName xml.Name           `xml:"readResponse"`
	Status  *Status            `xml:"status,omitempty" json:"status,omitempty"`
	Record  *SecurityException `xml:"record,omitempty" json:"record,omitempty"`
}

type ValidationException_AddRequest struct {
	/* Here */
	XMLName  xml.Name             `xml:"add"`
	XmlNSXSI string               `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string               `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string               `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ValidationException `xml:"record,omitempty" json:"record,omitempty"`
}

type ValidationException_AddResponse struct {
	XMLName       xml.Name                           `xml:"addResponse"`
	WriteResponse *ValidationException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ValidationException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ValidationException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ValidationException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                          `xml:"getResponse"`
	ReadResponse *ValidationException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ValidationException_ReadResponse struct {
	XMLName xml.Name             `xml:"readResponse"`
	Status  *Status              `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ValidationException `xml:"record,omitempty" json:"record,omitempty"`
}

type ImplementationException_AddRequest struct {
	/* Here */
	XMLName  xml.Name                 `xml:"add"`
	XmlNSXSI string                   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string                   `xml:"xmlns:platformCore,attr,omitempty"`
	XmlNS1   string                   `xml:"xmlns:ns1,attr,omitempty"`
	Record   *ImplementationException `xml:"record,omitempty" json:"record,omitempty"`
}

type ImplementationException_AddResponse struct {
	XMLName       xml.Name                               `xml:"addResponse"`
	WriteResponse *ImplementationException_WriteResponse `xml:"writeResponse,omitempty" json:"writeResponse,omitempty"`
}

type ImplementationException_WriteResponse struct {
	XMLName xml.Name `xml:"writeResponse"`
	Status  *Status  `xml:"status,omitempty" json:"status,omitempty"`
	BaseRef *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

//----------------------------------------------------

type ImplementationException_GetRequest struct {
	XMLName  xml.Name `xml:"get"`
	XmlNSXSI string   `xml:"xmlns:xsi,attr,omitempty"`
	XmlNSPC  string   `xml:"xmlns:platformCore,attr,omitempty"`
	BaseRef  *BaseRef `xml:"baseRef,omitempty" json:"baseRef,omitempty"`
}

type ImplementationException_GetResponse struct {
	//XMLName xml.Name `xml:"urn:messages_2022_1.platform.webservices.netsuite.com getResponse"`
	XMLName      xml.Name                              `xml:"getResponse"`
	ReadResponse *ImplementationException_ReadResponse `xml:"readResponse,omitempty" json:"readResponse,omitempty"`
}

//----------------------------------------------------

type ImplementationException_ReadResponse struct {
	XMLName xml.Name                 `xml:"readResponse"`
	Status  *Status                  `xml:"status,omitempty" json:"status,omitempty"`
	Record  *ImplementationException `xml:"record,omitempty" json:"record,omitempty"`
}

type EPCISQueryDocumentType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 EPCISQueryDocument"`

	*Document

	EPCISHeader *EPCISHeaderType `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISQueryBodyType `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISQueryDocumentExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISQueryDocumentExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISQueryBodyType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 EPCISBody"`

	GetQueryNames *GetQueryNames `xml:"GetQueryNames,omitempty" json:"GetQueryNames,omitempty"`

	GetQueryNamesResult *GetQueryNamesResult `xml:"GetQueryNamesResult,omitempty" json:"GetQueryNamesResult,omitempty"`

	Subscribe *Subscribe `xml:"Subscribe,omitempty" json:"Subscribe,omitempty"`

	SubscribeResult *SubscribeResult `xml:"SubscribeResult,omitempty" json:"SubscribeResult,omitempty"`

	Unsubscribe *Unsubscribe `xml:"Unsubscribe,omitempty" json:"Unsubscribe,omitempty"`

	UnsubscribeResult *UnsubscribeResult `xml:"UnsubscribeResult,omitempty" json:"UnsubscribeResult,omitempty"`

	GetSubscriptionIDs *GetSubscriptionIDs `xml:"GetSubscriptionIDs,omitempty" json:"GetSubscriptionIDs,omitempty"`

	GetSubscriptionIDsResult *GetSubscriptionIDsResult `xml:"GetSubscriptionIDsResult,omitempty" json:"GetSubscriptionIDsResult,omitempty"`

	Poll *Poll `xml:"Poll,omitempty" json:"Poll,omitempty"`

	GetStandardVersion *GetStandardVersion `xml:"GetStandardVersion,omitempty" json:"GetStandardVersion,omitempty"`

	GetStandardVersionResult *GetStandardVersionResult `xml:"GetStandardVersionResult,omitempty" json:"GetStandardVersionResult,omitempty"`

	GetVendorVersion *GetVendorVersion `xml:"GetVendorVersion,omitempty" json:"GetVendorVersion,omitempty"`

	GetVendorVersionResult *GetVendorVersionResult `xml:"GetVendorVersionResult,omitempty" json:"GetVendorVersionResult,omitempty"`

	DuplicateNameException *DuplicateNameException `xml:"DuplicateNameException,omitempty" json:"DuplicateNameException,omitempty"`

	InvalidURIException *InvalidURIException `xml:"InvalidURIException,omitempty" json:"InvalidURIException,omitempty"`

	NoSuchNameException *NoSuchNameException `xml:"NoSuchNameException,omitempty" json:"NoSuchNameException,omitempty"`

	NoSuchSubscriptionException *NoSuchSubscriptionException `xml:"NoSuchSubscriptionException,omitempty" json:"NoSuchSubscriptionException,omitempty"`

	DuplicateSubscriptionException *DuplicateSubscriptionException `xml:"DuplicateSubscriptionException,omitempty" json:"DuplicateSubscriptionException,omitempty"`

	QueryParameterException *QueryParameterException `xml:"QueryParameterException,omitempty" json:"QueryParameterException,omitempty"`

	QueryTooLargeException *QueryTooLargeException `xml:"QueryTooLargeException,omitempty" json:"QueryTooLargeException,omitempty"`

	QueryTooComplexException *QueryTooComplexException `xml:"QueryTooComplexException,omitempty" json:"QueryTooComplexException,omitempty"`

	SubscriptionControlsException *SubscriptionControlsException `xml:"SubscriptionControlsException,omitempty" json:"SubscriptionControlsException,omitempty"`

	SubscribeNotPermittedException *SubscribeNotPermittedException `xml:"SubscribeNotPermittedException,omitempty" json:"SubscribeNotPermittedException,omitempty"`

	SecurityException *SecurityException `xml:"SecurityException,omitempty" json:"SecurityException,omitempty"`

	ValidationException *ValidationException `xml:"ValidationException,omitempty" json:"ValidationException,omitempty"`

	ImplementationException *ImplementationException `xml:"ImplementationException,omitempty" json:"ImplementationException,omitempty"`

	QueryResults *QueryResults `xml:"QueryResults,omitempty" json:"QueryResults,omitempty"`
}

type Subscribe struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParams `xml:"params,omitempty" json:"params,omitempty"`

	Dest AnyURI `xml:"dest,omitempty" json:"dest,omitempty"`

	Controls *SubscriptionControls `xml:"controls,omitempty" json:"controls,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type Unsubscribe struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type GetSubscriptionIDs struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`
}

type Poll struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParams `xml:"params,omitempty" json:"params,omitempty"`
}

type VoidHolder struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`
}

type EmptyParms struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`
}

type ArrayOfString struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Astring []string `xml:"string,omitempty" json:"string,omitempty"`
}

type SubscriptionControls struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 controls"`

	Schedule *QuerySchedule `xml:"schedule,omitempty" json:"schedule,omitempty"`

	Trigger AnyURI `xml:"trigger,omitempty" json:"trigger,omitempty"`

	InitialRecordTime soap.XSDDateTime `xml:"initialRecordTime,omitempty" json:"initialRecordTime,omitempty"`

	ReportIfEmpty bool `xml:"reportIfEmpty,omitempty" json:"reportIfEmpty,omitempty"`

	Extension *SubscriptionControlsExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type SubscriptionControlsExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QuerySchedule struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 schedule"`

	Second string `xml:"second,omitempty" json:"second,omitempty"`

	Minute string `xml:"minute,omitempty" json:"minute,omitempty"`

	Hour string `xml:"hour,omitempty" json:"hour,omitempty"`

	DayOfMonth string `xml:"dayOfMonth,omitempty" json:"dayOfMonth,omitempty"`

	Month string `xml:"month,omitempty" json:"month,omitempty"`

	DayOfWeek string `xml:"dayOfWeek,omitempty" json:"dayOfWeek,omitempty"`

	Extension *QueryScheduleExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryScheduleExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryParams struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 params"`

	Param []*QueryParam `xml:"param,omitempty" json:"param,omitempty"`
}

type QueryParam struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 param"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value AnyType `xml:"value,omitempty" json:"value,omitempty"`
}

type QueryResults struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`

	ResultsBody *QueryResultsBody `xml:"resultsBody,omitempty" json:"resultsBody,omitempty"`

	Extension *QueryResultsExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsExtensionType struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsBody struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 resultsBody"`

	EventList *EventListType `xml:"EventList,omitempty" json:"EventList,omitempty"`

	VocabularyList *VocabularyListType `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`
}

type EPCISException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	Reason string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DuplicateNameException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type InvalidURIException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type NoSuchNameException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type NoSuchSubscriptionException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type DuplicateSubscriptionException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type QueryParameterException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type QueryTooLargeException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type QueryTooComplexException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type SubscriptionControlsException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type SubscribeNotPermittedException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type SecurityException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type ValidationException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException
}

type ImplementationException struct {
	XsiType string `xml:"xsi:type,attr,omitempty"  json:"-"`

	*EPCISException

	Severity *ImplementationExceptionSeverity `xml:"severity,omitempty" json:"severity,omitempty"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

func (service *netSuitePortType) EPCISQueryDocumentType_AddContext(ctx context.Context, request *EPCISQueryDocumentType_AddRequest) (*EPCISQueryDocumentType_AddResponse, error) {
	response := new(EPCISQueryDocumentType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryDocumentType_Add(request *EPCISQueryDocumentType_AddRequest) (*EPCISQueryDocumentType_AddResponse, error) {
	return service.EPCISQueryDocumentType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISQueryDocumentType_GetContext(ctx context.Context, request *EPCISQueryDocumentType_GetRequest) (*EPCISQueryDocumentType_GetResponse, error) {
	response := new(EPCISQueryDocumentType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryDocumentType_Get(request *EPCISQueryDocumentType_GetRequest) (*EPCISQueryDocumentType_GetResponse, error) {
	return service.EPCISQueryDocumentType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISQueryDocumentExtensionType_AddContext(ctx context.Context, request *EPCISQueryDocumentExtensionType_AddRequest) (*EPCISQueryDocumentExtensionType_AddResponse, error) {
	response := new(EPCISQueryDocumentExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryDocumentExtensionType_Add(request *EPCISQueryDocumentExtensionType_AddRequest) (*EPCISQueryDocumentExtensionType_AddResponse, error) {
	return service.EPCISQueryDocumentExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISQueryDocumentExtensionType_GetContext(ctx context.Context, request *EPCISQueryDocumentExtensionType_GetRequest) (*EPCISQueryDocumentExtensionType_GetResponse, error) {
	response := new(EPCISQueryDocumentExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryDocumentExtensionType_Get(request *EPCISQueryDocumentExtensionType_GetRequest) (*EPCISQueryDocumentExtensionType_GetResponse, error) {
	return service.EPCISQueryDocumentExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISQueryBodyType_AddContext(ctx context.Context, request *EPCISQueryBodyType_AddRequest) (*EPCISQueryBodyType_AddResponse, error) {
	response := new(EPCISQueryBodyType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryBodyType_Add(request *EPCISQueryBodyType_AddRequest) (*EPCISQueryBodyType_AddResponse, error) {
	return service.EPCISQueryBodyType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISQueryBodyType_GetContext(ctx context.Context, request *EPCISQueryBodyType_GetRequest) (*EPCISQueryBodyType_GetResponse, error) {
	response := new(EPCISQueryBodyType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISQueryBodyType_Get(request *EPCISQueryBodyType_GetRequest) (*EPCISQueryBodyType_GetResponse, error) {
	return service.EPCISQueryBodyType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Subscribe_AddContext(ctx context.Context, request *Subscribe_AddRequest) (*Subscribe_AddResponse, error) {
	response := new(Subscribe_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Subscribe_Add(request *Subscribe_AddRequest) (*Subscribe_AddResponse, error) {
	return service.Subscribe_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Subscribe_GetContext(ctx context.Context, request *Subscribe_GetRequest) (*Subscribe_GetResponse, error) {
	response := new(Subscribe_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Subscribe_Get(request *Subscribe_GetRequest) (*Subscribe_GetResponse, error) {
	return service.Subscribe_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Unsubscribe_AddContext(ctx context.Context, request *Unsubscribe_AddRequest) (*Unsubscribe_AddResponse, error) {
	response := new(Unsubscribe_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Unsubscribe_Add(request *Unsubscribe_AddRequest) (*Unsubscribe_AddResponse, error) {
	return service.Unsubscribe_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Unsubscribe_GetContext(ctx context.Context, request *Unsubscribe_GetRequest) (*Unsubscribe_GetResponse, error) {
	response := new(Unsubscribe_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Unsubscribe_Get(request *Unsubscribe_GetRequest) (*Unsubscribe_GetResponse, error) {
	return service.Unsubscribe_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) GetSubscriptionIDs_AddContext(ctx context.Context, request *GetSubscriptionIDs_AddRequest) (*GetSubscriptionIDs_AddResponse, error) {
	response := new(GetSubscriptionIDs_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) GetSubscriptionIDs_Add(request *GetSubscriptionIDs_AddRequest) (*GetSubscriptionIDs_AddResponse, error) {
	return service.GetSubscriptionIDs_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) GetSubscriptionIDs_GetContext(ctx context.Context, request *GetSubscriptionIDs_GetRequest) (*GetSubscriptionIDs_GetResponse, error) {
	response := new(GetSubscriptionIDs_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) GetSubscriptionIDs_Get(request *GetSubscriptionIDs_GetRequest) (*GetSubscriptionIDs_GetResponse, error) {
	return service.GetSubscriptionIDs_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Poll_AddContext(ctx context.Context, request *Poll_AddRequest) (*Poll_AddResponse, error) {
	response := new(Poll_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Poll_Add(request *Poll_AddRequest) (*Poll_AddResponse, error) {
	return service.Poll_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) Poll_GetContext(ctx context.Context, request *Poll_GetRequest) (*Poll_GetResponse, error) {
	response := new(Poll_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) Poll_Get(request *Poll_GetRequest) (*Poll_GetResponse, error) {
	return service.Poll_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VoidHolder_AddContext(ctx context.Context, request *VoidHolder_AddRequest) (*VoidHolder_AddResponse, error) {
	response := new(VoidHolder_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VoidHolder_Add(request *VoidHolder_AddRequest) (*VoidHolder_AddResponse, error) {
	return service.VoidHolder_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) VoidHolder_GetContext(ctx context.Context, request *VoidHolder_GetRequest) (*VoidHolder_GetResponse, error) {
	response := new(VoidHolder_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) VoidHolder_Get(request *VoidHolder_GetRequest) (*VoidHolder_GetResponse, error) {
	return service.VoidHolder_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EmptyParms_AddContext(ctx context.Context, request *EmptyParms_AddRequest) (*EmptyParms_AddResponse, error) {
	response := new(EmptyParms_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EmptyParms_Add(request *EmptyParms_AddRequest) (*EmptyParms_AddResponse, error) {
	return service.EmptyParms_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EmptyParms_GetContext(ctx context.Context, request *EmptyParms_GetRequest) (*EmptyParms_GetResponse, error) {
	response := new(EmptyParms_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EmptyParms_Get(request *EmptyParms_GetRequest) (*EmptyParms_GetResponse, error) {
	return service.EmptyParms_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ArrayOfString_AddContext(ctx context.Context, request *ArrayOfString_AddRequest) (*ArrayOfString_AddResponse, error) {
	response := new(ArrayOfString_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ArrayOfString_Add(request *ArrayOfString_AddRequest) (*ArrayOfString_AddResponse, error) {
	return service.ArrayOfString_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ArrayOfString_GetContext(ctx context.Context, request *ArrayOfString_GetRequest) (*ArrayOfString_GetResponse, error) {
	response := new(ArrayOfString_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ArrayOfString_Get(request *ArrayOfString_GetRequest) (*ArrayOfString_GetResponse, error) {
	return service.ArrayOfString_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControls_AddContext(ctx context.Context, request *SubscriptionControls_AddRequest) (*SubscriptionControls_AddResponse, error) {
	response := new(SubscriptionControls_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControls_Add(request *SubscriptionControls_AddRequest) (*SubscriptionControls_AddResponse, error) {
	return service.SubscriptionControls_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControls_GetContext(ctx context.Context, request *SubscriptionControls_GetRequest) (*SubscriptionControls_GetResponse, error) {
	response := new(SubscriptionControls_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControls_Get(request *SubscriptionControls_GetRequest) (*SubscriptionControls_GetResponse, error) {
	return service.SubscriptionControls_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControlsExtensionType_AddContext(ctx context.Context, request *SubscriptionControlsExtensionType_AddRequest) (*SubscriptionControlsExtensionType_AddResponse, error) {
	response := new(SubscriptionControlsExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControlsExtensionType_Add(request *SubscriptionControlsExtensionType_AddRequest) (*SubscriptionControlsExtensionType_AddResponse, error) {
	return service.SubscriptionControlsExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControlsExtensionType_GetContext(ctx context.Context, request *SubscriptionControlsExtensionType_GetRequest) (*SubscriptionControlsExtensionType_GetResponse, error) {
	response := new(SubscriptionControlsExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControlsExtensionType_Get(request *SubscriptionControlsExtensionType_GetRequest) (*SubscriptionControlsExtensionType_GetResponse, error) {
	return service.SubscriptionControlsExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuerySchedule_AddContext(ctx context.Context, request *QuerySchedule_AddRequest) (*QuerySchedule_AddResponse, error) {
	response := new(QuerySchedule_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuerySchedule_Add(request *QuerySchedule_AddRequest) (*QuerySchedule_AddResponse, error) {
	return service.QuerySchedule_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QuerySchedule_GetContext(ctx context.Context, request *QuerySchedule_GetRequest) (*QuerySchedule_GetResponse, error) {
	response := new(QuerySchedule_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QuerySchedule_Get(request *QuerySchedule_GetRequest) (*QuerySchedule_GetResponse, error) {
	return service.QuerySchedule_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryScheduleExtensionType_AddContext(ctx context.Context, request *QueryScheduleExtensionType_AddRequest) (*QueryScheduleExtensionType_AddResponse, error) {
	response := new(QueryScheduleExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryScheduleExtensionType_Add(request *QueryScheduleExtensionType_AddRequest) (*QueryScheduleExtensionType_AddResponse, error) {
	return service.QueryScheduleExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryScheduleExtensionType_GetContext(ctx context.Context, request *QueryScheduleExtensionType_GetRequest) (*QueryScheduleExtensionType_GetResponse, error) {
	response := new(QueryScheduleExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryScheduleExtensionType_Get(request *QueryScheduleExtensionType_GetRequest) (*QueryScheduleExtensionType_GetResponse, error) {
	return service.QueryScheduleExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParams_AddContext(ctx context.Context, request *QueryParams_AddRequest) (*QueryParams_AddResponse, error) {
	response := new(QueryParams_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParams_Add(request *QueryParams_AddRequest) (*QueryParams_AddResponse, error) {
	return service.QueryParams_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParams_GetContext(ctx context.Context, request *QueryParams_GetRequest) (*QueryParams_GetResponse, error) {
	response := new(QueryParams_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParams_Get(request *QueryParams_GetRequest) (*QueryParams_GetResponse, error) {
	return service.QueryParams_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParam_AddContext(ctx context.Context, request *QueryParam_AddRequest) (*QueryParam_AddResponse, error) {
	response := new(QueryParam_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParam_Add(request *QueryParam_AddRequest) (*QueryParam_AddResponse, error) {
	return service.QueryParam_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParam_GetContext(ctx context.Context, request *QueryParam_GetRequest) (*QueryParam_GetResponse, error) {
	response := new(QueryParam_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParam_Get(request *QueryParam_GetRequest) (*QueryParam_GetResponse, error) {
	return service.QueryParam_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResults_AddContext(ctx context.Context, request *QueryResults_AddRequest) (*QueryResults_AddResponse, error) {
	response := new(QueryResults_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResults_Add(request *QueryResults_AddRequest) (*QueryResults_AddResponse, error) {
	return service.QueryResults_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResults_GetContext(ctx context.Context, request *QueryResults_GetRequest) (*QueryResults_GetResponse, error) {
	response := new(QueryResults_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResults_Get(request *QueryResults_GetRequest) (*QueryResults_GetResponse, error) {
	return service.QueryResults_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResultsExtensionType_AddContext(ctx context.Context, request *QueryResultsExtensionType_AddRequest) (*QueryResultsExtensionType_AddResponse, error) {
	response := new(QueryResultsExtensionType_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResultsExtensionType_Add(request *QueryResultsExtensionType_AddRequest) (*QueryResultsExtensionType_AddResponse, error) {
	return service.QueryResultsExtensionType_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResultsExtensionType_GetContext(ctx context.Context, request *QueryResultsExtensionType_GetRequest) (*QueryResultsExtensionType_GetResponse, error) {
	response := new(QueryResultsExtensionType_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResultsExtensionType_Get(request *QueryResultsExtensionType_GetRequest) (*QueryResultsExtensionType_GetResponse, error) {
	return service.QueryResultsExtensionType_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResultsBody_AddContext(ctx context.Context, request *QueryResultsBody_AddRequest) (*QueryResultsBody_AddResponse, error) {
	response := new(QueryResultsBody_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResultsBody_Add(request *QueryResultsBody_AddRequest) (*QueryResultsBody_AddResponse, error) {
	return service.QueryResultsBody_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryResultsBody_GetContext(ctx context.Context, request *QueryResultsBody_GetRequest) (*QueryResultsBody_GetResponse, error) {
	response := new(QueryResultsBody_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryResultsBody_Get(request *QueryResultsBody_GetRequest) (*QueryResultsBody_GetResponse, error) {
	return service.QueryResultsBody_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISException_AddContext(ctx context.Context, request *EPCISException_AddRequest) (*EPCISException_AddResponse, error) {
	response := new(EPCISException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISException_Add(request *EPCISException_AddRequest) (*EPCISException_AddResponse, error) {
	return service.EPCISException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) EPCISException_GetContext(ctx context.Context, request *EPCISException_GetRequest) (*EPCISException_GetResponse, error) {
	response := new(EPCISException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) EPCISException_Get(request *EPCISException_GetRequest) (*EPCISException_GetResponse, error) {
	return service.EPCISException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DuplicateNameException_AddContext(ctx context.Context, request *DuplicateNameException_AddRequest) (*DuplicateNameException_AddResponse, error) {
	response := new(DuplicateNameException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DuplicateNameException_Add(request *DuplicateNameException_AddRequest) (*DuplicateNameException_AddResponse, error) {
	return service.DuplicateNameException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DuplicateNameException_GetContext(ctx context.Context, request *DuplicateNameException_GetRequest) (*DuplicateNameException_GetResponse, error) {
	response := new(DuplicateNameException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DuplicateNameException_Get(request *DuplicateNameException_GetRequest) (*DuplicateNameException_GetResponse, error) {
	return service.DuplicateNameException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) InvalidURIException_AddContext(ctx context.Context, request *InvalidURIException_AddRequest) (*InvalidURIException_AddResponse, error) {
	response := new(InvalidURIException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) InvalidURIException_Add(request *InvalidURIException_AddRequest) (*InvalidURIException_AddResponse, error) {
	return service.InvalidURIException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) InvalidURIException_GetContext(ctx context.Context, request *InvalidURIException_GetRequest) (*InvalidURIException_GetResponse, error) {
	response := new(InvalidURIException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) InvalidURIException_Get(request *InvalidURIException_GetRequest) (*InvalidURIException_GetResponse, error) {
	return service.InvalidURIException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) NoSuchNameException_AddContext(ctx context.Context, request *NoSuchNameException_AddRequest) (*NoSuchNameException_AddResponse, error) {
	response := new(NoSuchNameException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) NoSuchNameException_Add(request *NoSuchNameException_AddRequest) (*NoSuchNameException_AddResponse, error) {
	return service.NoSuchNameException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) NoSuchNameException_GetContext(ctx context.Context, request *NoSuchNameException_GetRequest) (*NoSuchNameException_GetResponse, error) {
	response := new(NoSuchNameException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) NoSuchNameException_Get(request *NoSuchNameException_GetRequest) (*NoSuchNameException_GetResponse, error) {
	return service.NoSuchNameException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) NoSuchSubscriptionException_AddContext(ctx context.Context, request *NoSuchSubscriptionException_AddRequest) (*NoSuchSubscriptionException_AddResponse, error) {
	response := new(NoSuchSubscriptionException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) NoSuchSubscriptionException_Add(request *NoSuchSubscriptionException_AddRequest) (*NoSuchSubscriptionException_AddResponse, error) {
	return service.NoSuchSubscriptionException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) NoSuchSubscriptionException_GetContext(ctx context.Context, request *NoSuchSubscriptionException_GetRequest) (*NoSuchSubscriptionException_GetResponse, error) {
	response := new(NoSuchSubscriptionException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) NoSuchSubscriptionException_Get(request *NoSuchSubscriptionException_GetRequest) (*NoSuchSubscriptionException_GetResponse, error) {
	return service.NoSuchSubscriptionException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DuplicateSubscriptionException_AddContext(ctx context.Context, request *DuplicateSubscriptionException_AddRequest) (*DuplicateSubscriptionException_AddResponse, error) {
	response := new(DuplicateSubscriptionException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DuplicateSubscriptionException_Add(request *DuplicateSubscriptionException_AddRequest) (*DuplicateSubscriptionException_AddResponse, error) {
	return service.DuplicateSubscriptionException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) DuplicateSubscriptionException_GetContext(ctx context.Context, request *DuplicateSubscriptionException_GetRequest) (*DuplicateSubscriptionException_GetResponse, error) {
	response := new(DuplicateSubscriptionException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) DuplicateSubscriptionException_Get(request *DuplicateSubscriptionException_GetRequest) (*DuplicateSubscriptionException_GetResponse, error) {
	return service.DuplicateSubscriptionException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParameterException_AddContext(ctx context.Context, request *QueryParameterException_AddRequest) (*QueryParameterException_AddResponse, error) {
	response := new(QueryParameterException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParameterException_Add(request *QueryParameterException_AddRequest) (*QueryParameterException_AddResponse, error) {
	return service.QueryParameterException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryParameterException_GetContext(ctx context.Context, request *QueryParameterException_GetRequest) (*QueryParameterException_GetResponse, error) {
	response := new(QueryParameterException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryParameterException_Get(request *QueryParameterException_GetRequest) (*QueryParameterException_GetResponse, error) {
	return service.QueryParameterException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryTooLargeException_AddContext(ctx context.Context, request *QueryTooLargeException_AddRequest) (*QueryTooLargeException_AddResponse, error) {
	response := new(QueryTooLargeException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryTooLargeException_Add(request *QueryTooLargeException_AddRequest) (*QueryTooLargeException_AddResponse, error) {
	return service.QueryTooLargeException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryTooLargeException_GetContext(ctx context.Context, request *QueryTooLargeException_GetRequest) (*QueryTooLargeException_GetResponse, error) {
	response := new(QueryTooLargeException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryTooLargeException_Get(request *QueryTooLargeException_GetRequest) (*QueryTooLargeException_GetResponse, error) {
	return service.QueryTooLargeException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryTooComplexException_AddContext(ctx context.Context, request *QueryTooComplexException_AddRequest) (*QueryTooComplexException_AddResponse, error) {
	response := new(QueryTooComplexException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryTooComplexException_Add(request *QueryTooComplexException_AddRequest) (*QueryTooComplexException_AddResponse, error) {
	return service.QueryTooComplexException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) QueryTooComplexException_GetContext(ctx context.Context, request *QueryTooComplexException_GetRequest) (*QueryTooComplexException_GetResponse, error) {
	response := new(QueryTooComplexException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) QueryTooComplexException_Get(request *QueryTooComplexException_GetRequest) (*QueryTooComplexException_GetResponse, error) {
	return service.QueryTooComplexException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControlsException_AddContext(ctx context.Context, request *SubscriptionControlsException_AddRequest) (*SubscriptionControlsException_AddResponse, error) {
	response := new(SubscriptionControlsException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControlsException_Add(request *SubscriptionControlsException_AddRequest) (*SubscriptionControlsException_AddResponse, error) {
	return service.SubscriptionControlsException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscriptionControlsException_GetContext(ctx context.Context, request *SubscriptionControlsException_GetRequest) (*SubscriptionControlsException_GetResponse, error) {
	response := new(SubscriptionControlsException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscriptionControlsException_Get(request *SubscriptionControlsException_GetRequest) (*SubscriptionControlsException_GetResponse, error) {
	return service.SubscriptionControlsException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscribeNotPermittedException_AddContext(ctx context.Context, request *SubscribeNotPermittedException_AddRequest) (*SubscribeNotPermittedException_AddResponse, error) {
	response := new(SubscribeNotPermittedException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscribeNotPermittedException_Add(request *SubscribeNotPermittedException_AddRequest) (*SubscribeNotPermittedException_AddResponse, error) {
	return service.SubscribeNotPermittedException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SubscribeNotPermittedException_GetContext(ctx context.Context, request *SubscribeNotPermittedException_GetRequest) (*SubscribeNotPermittedException_GetResponse, error) {
	response := new(SubscribeNotPermittedException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SubscribeNotPermittedException_Get(request *SubscribeNotPermittedException_GetRequest) (*SubscribeNotPermittedException_GetResponse, error) {
	return service.SubscribeNotPermittedException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SecurityException_AddContext(ctx context.Context, request *SecurityException_AddRequest) (*SecurityException_AddResponse, error) {
	response := new(SecurityException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SecurityException_Add(request *SecurityException_AddRequest) (*SecurityException_AddResponse, error) {
	return service.SecurityException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) SecurityException_GetContext(ctx context.Context, request *SecurityException_GetRequest) (*SecurityException_GetResponse, error) {
	response := new(SecurityException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) SecurityException_Get(request *SecurityException_GetRequest) (*SecurityException_GetResponse, error) {
	return service.SecurityException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ValidationException_AddContext(ctx context.Context, request *ValidationException_AddRequest) (*ValidationException_AddResponse, error) {
	response := new(ValidationException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ValidationException_Add(request *ValidationException_AddRequest) (*ValidationException_AddResponse, error) {
	return service.ValidationException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ValidationException_GetContext(ctx context.Context, request *ValidationException_GetRequest) (*ValidationException_GetResponse, error) {
	response := new(ValidationException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ValidationException_Get(request *ValidationException_GetRequest) (*ValidationException_GetResponse, error) {
	return service.ValidationException_GetContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ImplementationException_AddContext(ctx context.Context, request *ImplementationException_AddRequest) (*ImplementationException_AddResponse, error) {
	response := new(ImplementationException_AddResponse)
	err := service.client.CallContext(ctx, "add", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ImplementationException_Add(request *ImplementationException_AddRequest) (*ImplementationException_AddResponse, error) {
	return service.ImplementationException_AddContext(
		context.Background(),
		request,
	)
}

func (service *netSuitePortType) ImplementationException_GetContext(ctx context.Context, request *ImplementationException_GetRequest) (*ImplementationException_GetResponse, error) {
	response := new(ImplementationException_GetResponse)
	err := service.client.CallContext(ctx, "get", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *netSuitePortType) ImplementationException_Get(request *ImplementationException_GetRequest) (*ImplementationException_GetResponse, error) {
	return service.ImplementationException_GetContext(
		context.Background(),
		request,
	)
}

type EPCISServicePortType interface {

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetQueryNames(request *EmptyParms) (*ArrayOfString, error)

	GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - InvalidURIExceptionFault
	//   - DuplicateSubscriptionExceptionFault
	//   - QueryParameterExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - SubscriptionControlsExceptionFault
	//   - SubscribeNotPermittedExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Subscribe(request *Subscribe) (*VoidHolder, error)

	SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchSubscriptionExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Unsubscribe(request *Unsubscribe) (*VoidHolder, error)

	UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error)

	GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - QueryParameterExceptionFault
	//   - QueryTooLargeExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Poll(request *Poll) (*QueryResults, error)

	PollContext(ctx context.Context, request *Poll) (*QueryResults, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetStandardVersion(request *EmptyParms) (*string, error)

	GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetVendorVersion(request *EmptyParms) (*string, error)

	GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error)
}

type ePCISServicePortType struct {
	client *soap.Client
}

func NewEPCISServicePortType(client *soap.Client) EPCISServicePortType {
	/* Here */
	return &ePCISServicePortType{
		client: client,
	}
}

func (service *ePCISServicePortType) GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetQueryNames(request *EmptyParms) (*ArrayOfString, error) {
	return service.GetQueryNamesContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Subscribe(request *Subscribe) (*VoidHolder, error) {
	return service.SubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Unsubscribe(request *Unsubscribe) (*VoidHolder, error) {
	return service.UnsubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error) {
	return service.GetSubscriptionIDsContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) PollContext(ctx context.Context, request *Poll) (*QueryResults, error) {
	response := new(QueryResults)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Poll(request *Poll) (*QueryResults, error) {
	return service.PollContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetStandardVersion(request *EmptyParms) (*string, error) {
	return service.GetStandardVersionContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetVendorVersion(request *EmptyParms) (*string, error) {
	return service.GetVendorVersionContext(
		context.Background(),
		request,
	)
}
