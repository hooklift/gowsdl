// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Document struct {

	//
	// The version of the schema corresponding to which the instance conforms.
	//

	SchemaVersion float64 `xml:"urn:epcglobal:xsd:1 schemaVersion,attr,omitempty" json:"schemaVersion,omitempty"`

	//
	// The date the message was created. Used for auditing and logging.
	//

	CreationDate soap.XSDDateTime `xml:"urn:epcglobal:xsd:1 creationDate,attr,omitempty" json:"creationDate,omitempty"`
}

type EPC string

type DocumentIdentification struct {
	Standard string `xml:"Standard,omitempty" json:"Standard,omitempty"`

	TypeVersion string `xml:"TypeVersion,omitempty" json:"TypeVersion,omitempty"`

	InstanceIdentifier string `xml:"InstanceIdentifier,omitempty" json:"InstanceIdentifier,omitempty"`

	Type string `xml:"Type,omitempty" json:"Type,omitempty"`

	MultipleType bool `xml:"MultipleType,omitempty" json:"MultipleType,omitempty"`

	CreationDateAndTime soap.XSDDateTime `xml:"CreationDateAndTime,omitempty" json:"CreationDateAndTime,omitempty"`
}

type Partner struct {
	Identifier *PartnerIdentification `xml:"Identifier,omitempty" json:"Identifier,omitempty"`

	ContactInformation []*ContactInformation `xml:"ContactInformation,omitempty" json:"ContactInformation,omitempty"`
}

type PartnerIdentification struct {
	XMLName xml.Name `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Identifier"`

	Value string `xml:",chardata" json:"-,"`

	Authority string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Authority,attr,omitempty" json:"Authority,omitempty"`
}

type ContactInformation struct {
	Contact string `xml:"Contact,omitempty" json:"Contact,omitempty"`

	EmailAddress string `xml:"EmailAddress,omitempty" json:"EmailAddress,omitempty"`

	FaxNumber string `xml:"FaxNumber,omitempty" json:"FaxNumber,omitempty"`

	TelephoneNumber string `xml:"TelephoneNumber,omitempty" json:"TelephoneNumber,omitempty"`

	ContactTypeIdentifier string `xml:"ContactTypeIdentifier,omitempty" json:"ContactTypeIdentifier,omitempty"`
}

// The MIME type as defined by IANA. Please refer to
// http://www.iana.org/assignments/media-types/ for a list of types.
//

type MimeTypeQualifier string

// ISO 639-2; 1998 representation of Language name. Refer to http://www.loc.gov/standards/iso639-2/iso639jac.html to get the latest version of the standard.
//

type Language string

type Manifest struct {
	NumberOfItems int32 `xml:"NumberOfItems,omitempty" json:"NumberOfItems,omitempty"`

	ManifestItem []*ManifestItem `xml:"ManifestItem,omitempty" json:"ManifestItem,omitempty"`
}

type ManifestItem struct {
	MimeTypeQualifierCode *MimeTypeQualifier `xml:"MimeTypeQualifierCode,omitempty" json:"MimeTypeQualifierCode,omitempty"`

	UniformResourceIdentifier AnyURI `xml:"UniformResourceIdentifier,omitempty" json:"UniformResourceIdentifier,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	LanguageCode *Language `xml:"LanguageCode,omitempty" json:"LanguageCode,omitempty"`
}

type TypeOfServiceTransaction string

const (
	TypeOfServiceTransactionRequestingServiceTransaction TypeOfServiceTransaction = "RequestingServiceTransaction"

	TypeOfServiceTransactionRespondingServiceTransaction TypeOfServiceTransaction = "RespondingServiceTransaction"
)

type ScopeInformation AnyType

type BusinessScope struct {
	Scope []*Scope `xml:"Scope,omitempty" json:"Scope,omitempty"`
}

type Scope struct {
	ScopeInformation []*ScopeInformation `xml:"ScopeInformation,omitempty" json:"ScopeInformation,omitempty"`
}

type CorrelationInformation struct {
	RequestingDocumentCreationDateTime soap.XSDDateTime `xml:"RequestingDocumentCreationDateTime,omitempty" json:"RequestingDocumentCreationDateTime,omitempty"`

	RequestingDocumentInstanceIdentifier string `xml:"RequestingDocumentInstanceIdentifier,omitempty" json:"RequestingDocumentInstanceIdentifier,omitempty"`

	ExpectedResponseDateTime soap.XSDDateTime `xml:"ExpectedResponseDateTime,omitempty" json:"ExpectedResponseDateTime,omitempty"`
}

type BusinessService struct {
	BusinessServiceName string `xml:"BusinessServiceName,omitempty" json:"BusinessServiceName,omitempty"`

	ServiceTransaction *ServiceTransaction `xml:"ServiceTransaction,omitempty" json:"ServiceTransaction,omitempty"`
}

type ServiceTransaction struct {
	TypeOfServiceTransaction *TypeOfServiceTransaction `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TypeOfServiceTransaction,attr,omitempty" json:"TypeOfServiceTransaction,omitempty"`

	IsNonRepudiationRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsNonRepudiationRequired,attr,omitempty" json:"IsNonRepudiationRequired,omitempty"`

	IsAuthenticationRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsAuthenticationRequired,attr,omitempty" json:"IsAuthenticationRequired,omitempty"`

	IsNonRepudiationOfReceiptRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsNonRepudiationOfReceiptRequired,attr,omitempty" json:"IsNonRepudiationOfReceiptRequired,omitempty"`

	IsIntegrityCheckRequired string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsIntegrityCheckRequired,attr,omitempty" json:"IsIntegrityCheckRequired,omitempty"`

	IsApplicationErrorResponseRequested string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader IsApplicationErrorResponseRequested,attr,omitempty" json:"IsApplicationErrorResponseRequested,omitempty"`

	TimeToAcknowledgeReceipt string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToAcknowledgeReceipt,attr,omitempty" json:"TimeToAcknowledgeReceipt,omitempty"`

	TimeToAcknowledgeAcceptance string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToAcknowledgeAcceptance,attr,omitempty" json:"TimeToAcknowledgeAcceptance,omitempty"`

	TimeToPerform string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader TimeToPerform,attr,omitempty" json:"TimeToPerform,omitempty"`

	Recurrence string `xml:"http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader Recurrence,attr,omitempty" json:"Recurrence,omitempty"`
}

type StandardBusinessDocumentHeader struct {
	HeaderVersion string `xml:"HeaderVersion,omitempty" json:"HeaderVersion,omitempty"`

	Sender []*Partner `xml:"Sender,omitempty" json:"Sender,omitempty"`

	Receiver []*Partner `xml:"Receiver,omitempty" json:"Receiver,omitempty"`

	DocumentIdentification *DocumentIdentification `xml:"DocumentIdentification,omitempty" json:"DocumentIdentification,omitempty"`

	Manifest *Manifest `xml:"Manifest,omitempty" json:"Manifest,omitempty"`

	BusinessScope *BusinessScope `xml:"BusinessScope,omitempty" json:"BusinessScope,omitempty"`
}

type StandardBusinessDocument struct {
	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ActionType string

const (
	ActionTypeADD ActionType = "ADD"

	ActionTypeOBSERVE ActionType = "OBSERVE"

	ActionTypeDELETE ActionType = "DELETE"
)

type ParentIDType AnyURI

type BusinessStepIDType AnyURI

type DispositionIDType AnyURI

type EPCClassType AnyURI

type UOMType string

type ReadPointIDType AnyURI

type BusinessLocationIDType AnyURI

type BusinessTransactionIDType AnyURI

type BusinessTransactionTypeIDType AnyURI

type SourceDestIDType AnyURI

type SourceDestTypeIDType AnyURI

type TransformationIDType AnyURI

type EventIDType AnyURI

type ErrorReasonIDType AnyURI

type EPCISDocument EPCISDocumentType

type EPCISDocumentType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISDocument"`

	*Document

	EPCISHeader *EPCISHeaderType `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISBodyType `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISDocumentExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISDocumentExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISHeader"`

	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Extension *EPCISHeaderExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	EPCISMasterData *EPCISMasterDataType `xml:"EPCISMasterData,omitempty" json:"EPCISMasterData,omitempty"`

	Extension *EPCISHeaderExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISHeaderExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISMasterDataType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISMasterData"`

	VocabularyList *VocabularyListType `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`

	Extension *EPCISMasterDataExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISMasterDataExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyList"`

	Vocabulary []*VocabularyType `xml:"Vocabulary,omitempty" json:"Vocabulary,omitempty"`
}

type VocabularyType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 Vocabulary"`

	VocabularyElementList *VocabularyElementListType `xml:"VocabularyElementList,omitempty" json:"VocabularyElementList,omitempty"`

	Extension *VocabularyExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Type AnyURI `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type VocabularyElementListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyElementList"`

	VocabularyElement []*VocabularyElementType `xml:"VocabularyElement,omitempty" json:"VocabularyElement,omitempty"`
}

type VocabularyElementType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 VocabularyElement"`

	Attribute []*AttributeType `xml:"attribute,omitempty" json:"attribute,omitempty"`

	Children *IDListType `xml:"children,omitempty" json:"children,omitempty"`

	Extension *VocabularyElementExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Id AnyURI `xml:"urn:epcglobal:epcis:xsd:1 id,attr,omitempty" json:"id,omitempty"`
}

type AttributeType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 attribute"`

	AnyType

	Id AnyURI `xml:"urn:epcglobal:epcis:xsd:1 id,attr,omitempty" json:"id,omitempty"`
}

type IDListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 children"`

	Id []AnyURI `xml:"id,omitempty" json:"id,omitempty"`
}

type VocabularyExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyElementExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISBody"`

	EventList *EventListType `xml:"EventList,omitempty" json:"EventList,omitempty"`

	Extension *EPCISBodyExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EventListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EventList"`

	ObjectEvent []*ObjectEventType `xml:"ObjectEvent,omitempty" json:"ObjectEvent,omitempty"`

	AggregationEvent []*AggregationEventType `xml:"AggregationEvent,omitempty" json:"AggregationEvent,omitempty"`

	QuantityEvent []*QuantityEventType `xml:"QuantityEvent,omitempty" json:"QuantityEvent,omitempty"`

	TransactionEvent []*TransactionEventType `xml:"TransactionEvent,omitempty" json:"TransactionEvent,omitempty"`

	Extension *EPCISEventListExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	TransformationEvent *TransformationEventType `xml:"TransformationEvent,omitempty" json:"TransformationEvent,omitempty"`

	Extension *EPCISEventListExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCListType struct {
	Epc []*EPC `xml:"epc,omitempty" json:"epc,omitempty"`
}

type QuantityElementType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 quantityElement"`

	EpcClass *EPCClassType `xml:"epcClass,omitempty" json:"epcClass,omitempty"`
}

type QuantityListType struct {
	QuantityElement []*QuantityElementType `xml:"quantityElement,omitempty" json:"quantityElement,omitempty"`
}

type ReadPointType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 readPoint"`

	Id *ReadPointIDType `xml:"id,omitempty" json:"id,omitempty"`

	Extension *ReadPointExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ReadPointExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizLocation"`

	Id *BusinessLocationIDType `xml:"id,omitempty" json:"id,omitempty"`

	Extension *BusinessLocationExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessTransactionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizTransaction"`

	Value *BusinessTransactionIDType `xml:",chardata" json:"-,"`

	Type *BusinessTransactionTypeIDType `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type BusinessTransactionListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 bizTransactionList"`

	BizTransaction []*BusinessTransactionType `xml:"bizTransaction,omitempty" json:"bizTransaction,omitempty"`
}

type SourceDestType struct {
	Value *SourceDestIDType `xml:",chardata" json:"-,"`

	Type *SourceDestTypeIDType `xml:"urn:epcglobal:epcis:xsd:1 type,attr,omitempty" json:"type,omitempty"`
}

type SourceListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 sourceList"`

	Source []*SourceDestType `xml:"source,omitempty" json:"source,omitempty"`
}

type DestinationListType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 destinationList"`

	Destination []*SourceDestType `xml:"destination,omitempty" json:"destination,omitempty"`
}

type ILMDType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 ilmd"`

	Extension *ILMDExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ILMDExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type CorrectiveEventIDsType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 correctiveEventIDs"`

	CorrectiveEventID []*EventIDType `xml:"correctiveEventID,omitempty" json:"correctiveEventID,omitempty"`
}

type ErrorDeclarationType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 errorDeclaration"`

	DeclarationTime soap.XSDDateTime `xml:"declarationTime,omitempty" json:"declarationTime,omitempty"`

	Reason *ErrorReasonIDType `xml:"reason,omitempty" json:"reason,omitempty"`

	CorrectiveEventIDs *CorrectiveEventIDsType `xml:"correctiveEventIDs,omitempty" json:"correctiveEventIDs,omitempty"`

	Extension *ErrorDeclarationExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ErrorDeclarationExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISEventType struct {
	EventTime soap.XSDDateTime `xml:"eventTime,omitempty" json:"eventTime,omitempty"`

	RecordTime soap.XSDDateTime `xml:"recordTime,omitempty" json:"recordTime,omitempty"`

	EventTimeZoneOffset string `xml:"eventTimeZoneOffset,omitempty" json:"eventTimeZoneOffset,omitempty"`

	BaseExtension *EPCISEventExtensionType `xml:"baseExtension,omitempty" json:"baseExtension,omitempty"`
}

type EPCISEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 baseExtension"`

	EventID *EventIDType `xml:"eventID,omitempty" json:"eventID,omitempty"`

	ErrorDeclaration *ErrorDeclarationType `xml:"errorDeclaration,omitempty" json:"errorDeclaration,omitempty"`

	Extension *EPCISEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ObjectEventType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 ObjectEvent"`

	*EPCISEventType

	EpcList *EPCListType `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *ObjectEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	QuantityList *QuantityListType `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDType `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *ObjectEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type AggregationEventType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 AggregationEvent"`

	*EPCISEventType

	ParentID *ParentIDType `xml:"parentID,omitempty" json:"parentID,omitempty"`

	ChildEPCs *EPCListType `xml:"childEPCs,omitempty" json:"childEPCs,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *AggregationEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	ChildQuantityList *QuantityListType `xml:"childQuantityList,omitempty" json:"childQuantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *AggregationEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QuantityEventType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 QuantityEvent"`

	*EPCISEventType

	EpcClass *EPCClassType `xml:"epcClass,omitempty" json:"epcClass,omitempty"`

	Quantity int32 `xml:"quantity,omitempty" json:"quantity,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *QuantityEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type QuantityEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransactionEventType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 TransactionEvent"`

	*EPCISEventType

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	ParentID *ParentIDType `xml:"parentID,omitempty" json:"parentID,omitempty"`

	EpcList *EPCListType `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionType `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	Extension *TransactionEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	QuantityList *QuantityListType `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *TransactionEventExtension2Type `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtension2Type struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransformationEventType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 TransformationEvent"`

	*EPCISEventType

	InputEPCList *EPCListType `xml:"inputEPCList,omitempty" json:"inputEPCList,omitempty"`

	InputQuantityList *QuantityListType `xml:"inputQuantityList,omitempty" json:"inputQuantityList,omitempty"`

	OutputEPCList *EPCListType `xml:"outputEPCList,omitempty" json:"outputEPCList,omitempty"`

	OutputQuantityList *QuantityListType `xml:"outputQuantityList,omitempty" json:"outputQuantityList,omitempty"`

	TransformationID *TransformationIDType `xml:"transformationID,omitempty" json:"transformationID,omitempty"`

	BizStep *BusinessStepIDType `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDType `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointType `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationType `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListType `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	SourceList *SourceListType `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListType `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDType `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *TransformationEventExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransformationEventExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ImplementationExceptionSeverity NCName

const (
	ImplementationExceptionSeverityERROR ImplementationExceptionSeverity = "ERROR"

	ImplementationExceptionSeveritySEVERE ImplementationExceptionSeverity = "SEVERE"
)

type EPCISQueryDocument EPCISQueryDocumentType

type GetQueryNames EmptyParms

type GetQueryNamesResult ArrayOfString

type SubscribeResult VoidHolder

type UnsubscribeResult VoidHolder

type GetSubscriptionIDsResult ArrayOfString

type GetStandardVersion EmptyParms

type GetStandardVersionResult string

type GetVendorVersion EmptyParms

type GetVendorVersionResult string

type EPCISQueryDocumentType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 EPCISQueryDocument"`

	*Document

	EPCISHeader *EPCISHeaderType `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISQueryBodyType `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISQueryDocumentExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISQueryDocumentExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISQueryBodyType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 EPCISBody"`

	GetQueryNames *GetQueryNames `xml:"GetQueryNames,omitempty" json:"GetQueryNames,omitempty"`

	GetQueryNamesResult *GetQueryNamesResult `xml:"GetQueryNamesResult,omitempty" json:"GetQueryNamesResult,omitempty"`

	Subscribe *Subscribe `xml:"Subscribe,omitempty" json:"Subscribe,omitempty"`

	SubscribeResult *SubscribeResult `xml:"SubscribeResult,omitempty" json:"SubscribeResult,omitempty"`

	Unsubscribe *Unsubscribe `xml:"Unsubscribe,omitempty" json:"Unsubscribe,omitempty"`

	UnsubscribeResult *UnsubscribeResult `xml:"UnsubscribeResult,omitempty" json:"UnsubscribeResult,omitempty"`

	GetSubscriptionIDs *GetSubscriptionIDs `xml:"GetSubscriptionIDs,omitempty" json:"GetSubscriptionIDs,omitempty"`

	GetSubscriptionIDsResult *GetSubscriptionIDsResult `xml:"GetSubscriptionIDsResult,omitempty" json:"GetSubscriptionIDsResult,omitempty"`

	Poll *Poll `xml:"Poll,omitempty" json:"Poll,omitempty"`

	GetStandardVersion *GetStandardVersion `xml:"GetStandardVersion,omitempty" json:"GetStandardVersion,omitempty"`

	GetStandardVersionResult *GetStandardVersionResult `xml:"GetStandardVersionResult,omitempty" json:"GetStandardVersionResult,omitempty"`

	GetVendorVersion *GetVendorVersion `xml:"GetVendorVersion,omitempty" json:"GetVendorVersion,omitempty"`

	GetVendorVersionResult *GetVendorVersionResult `xml:"GetVendorVersionResult,omitempty" json:"GetVendorVersionResult,omitempty"`

	DuplicateNameException *DuplicateNameException `xml:"DuplicateNameException,omitempty" json:"DuplicateNameException,omitempty"`

	InvalidURIException *InvalidURIException `xml:"InvalidURIException,omitempty" json:"InvalidURIException,omitempty"`

	NoSuchNameException *NoSuchNameException `xml:"NoSuchNameException,omitempty" json:"NoSuchNameException,omitempty"`

	NoSuchSubscriptionException *NoSuchSubscriptionException `xml:"NoSuchSubscriptionException,omitempty" json:"NoSuchSubscriptionException,omitempty"`

	DuplicateSubscriptionException *DuplicateSubscriptionException `xml:"DuplicateSubscriptionException,omitempty" json:"DuplicateSubscriptionException,omitempty"`

	QueryParameterException *QueryParameterException `xml:"QueryParameterException,omitempty" json:"QueryParameterException,omitempty"`

	QueryTooLargeException *QueryTooLargeException `xml:"QueryTooLargeException,omitempty" json:"QueryTooLargeException,omitempty"`

	QueryTooComplexException *QueryTooComplexException `xml:"QueryTooComplexException,omitempty" json:"QueryTooComplexException,omitempty"`

	SubscriptionControlsException *SubscriptionControlsException `xml:"SubscriptionControlsException,omitempty" json:"SubscriptionControlsException,omitempty"`

	SubscribeNotPermittedException *SubscribeNotPermittedException `xml:"SubscribeNotPermittedException,omitempty" json:"SubscribeNotPermittedException,omitempty"`

	SecurityException *SecurityException `xml:"SecurityException,omitempty" json:"SecurityException,omitempty"`

	ValidationException *ValidationException `xml:"ValidationException,omitempty" json:"ValidationException,omitempty"`

	ImplementationException *ImplementationException `xml:"ImplementationException,omitempty" json:"ImplementationException,omitempty"`

	QueryResults *QueryResults `xml:"QueryResults,omitempty" json:"QueryResults,omitempty"`
}

type Subscribe struct {
	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParams `xml:"params,omitempty" json:"params,omitempty"`

	Dest AnyURI `xml:"dest,omitempty" json:"dest,omitempty"`

	Controls *SubscriptionControls `xml:"controls,omitempty" json:"controls,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type Unsubscribe struct {
	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type GetSubscriptionIDs struct {
	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`
}

type Poll struct {
	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParams `xml:"params,omitempty" json:"params,omitempty"`
}

type VoidHolder struct {
}

type EmptyParms struct {
}

type ArrayOfString struct {
	Astring []string `xml:"string,omitempty" json:"string,omitempty"`
}

type SubscriptionControls struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 controls"`

	Schedule *QuerySchedule `xml:"schedule,omitempty" json:"schedule,omitempty"`

	Trigger AnyURI `xml:"trigger,omitempty" json:"trigger,omitempty"`

	InitialRecordTime soap.XSDDateTime `xml:"initialRecordTime,omitempty" json:"initialRecordTime,omitempty"`

	ReportIfEmpty bool `xml:"reportIfEmpty,omitempty" json:"reportIfEmpty,omitempty"`

	Extension *SubscriptionControlsExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type SubscriptionControlsExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QuerySchedule struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 schedule"`

	Second string `xml:"second,omitempty" json:"second,omitempty"`

	Minute string `xml:"minute,omitempty" json:"minute,omitempty"`

	Hour string `xml:"hour,omitempty" json:"hour,omitempty"`

	DayOfMonth string `xml:"dayOfMonth,omitempty" json:"dayOfMonth,omitempty"`

	Month string `xml:"month,omitempty" json:"month,omitempty"`

	DayOfWeek string `xml:"dayOfWeek,omitempty" json:"dayOfWeek,omitempty"`

	Extension *QueryScheduleExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryScheduleExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryParams struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 params"`

	Param []*QueryParam `xml:"param,omitempty" json:"param,omitempty"`
}

type QueryParam struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 param"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value AnyType `xml:"value,omitempty" json:"value,omitempty"`
}

type QueryResults struct {
	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`

	ResultsBody *QueryResultsBody `xml:"resultsBody,omitempty" json:"resultsBody,omitempty"`

	Extension *QueryResultsExtensionType `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsExtensionType struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 extension"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsBody struct {
	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 resultsBody"`

	EventList *EventListType `xml:"EventList,omitempty" json:"EventList,omitempty"`

	VocabularyList *VocabularyListType `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`
}

type EPCISException struct {
	Reason string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DuplicateNameException struct {
	*EPCISException
}

type InvalidURIException struct {
	*EPCISException
}

type NoSuchNameException struct {
	*EPCISException
}

type NoSuchSubscriptionException struct {
	*EPCISException
}

type DuplicateSubscriptionException struct {
	*EPCISException
}

type QueryParameterException struct {
	*EPCISException
}

type QueryTooLargeException struct {
	*EPCISException

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type QueryTooComplexException struct {
	*EPCISException
}

type SubscriptionControlsException struct {
	*EPCISException
}

type SubscribeNotPermittedException struct {
	*EPCISException
}

type SecurityException struct {
	*EPCISException
}

type ValidationException struct {
	*EPCISException
}

type ImplementationException struct {
	*EPCISException

	Severity *ImplementationExceptionSeverity `xml:"severity,omitempty" json:"severity,omitempty"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type EPCISServicePortType interface {

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetQueryNames(request *EmptyParms) (*ArrayOfString, error)

	GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - InvalidURIExceptionFault
	//   - DuplicateSubscriptionExceptionFault
	//   - QueryParameterExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - SubscriptionControlsExceptionFault
	//   - SubscribeNotPermittedExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Subscribe(request *Subscribe) (*VoidHolder, error)

	SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchSubscriptionExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Unsubscribe(request *Unsubscribe) (*VoidHolder, error)

	UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error)

	GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - QueryParameterExceptionFault
	//   - QueryTooLargeExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Poll(request *Poll) (*QueryResults, error)

	PollContext(ctx context.Context, request *Poll) (*QueryResults, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetStandardVersion(request *EmptyParms) (*string, error)

	GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetVendorVersion(request *EmptyParms) (*string, error)

	GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error)
}

type ePCISServicePortType struct {
	client *soap.Client
}

func NewEPCISServicePortType(client *soap.Client) EPCISServicePortType {
	return &ePCISServicePortType{
		client: client,
	}
}

func (service *ePCISServicePortType) GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetQueryNames(request *EmptyParms) (*ArrayOfString, error) {
	return service.GetQueryNamesContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Subscribe(request *Subscribe) (*VoidHolder, error) {
	return service.SubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Unsubscribe(request *Unsubscribe) (*VoidHolder, error) {
	return service.UnsubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error) {
	return service.GetSubscriptionIDsContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) PollContext(ctx context.Context, request *Poll) (*QueryResults, error) {
	response := new(QueryResults)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Poll(request *Poll) (*QueryResults, error) {
	return service.PollContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetStandardVersion(request *EmptyParms) (*string, error) {
	return service.GetStandardVersionContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetVendorVersion(request *EmptyParms) (*string, error) {
	return service.GetVendorVersionContext(
		context.Background(),
		request,
	)
}
