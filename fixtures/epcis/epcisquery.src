// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type DocumentIntf interface {
	_xDocument()
}

type Document struct {
	DocumentIntf

	//
	// The version of the schema corresponding to which the instance conforms.
	//

	SchemaVersion float64 `xml:"schemaVersion,attr,omitempty" json:"schemaVersion,omitempty"`

	//
	// The date the message was created. Used for auditing and logging.
	//

	CreationDate soap.XSDDateTime `xml:"creationDate,attr,omitempty" json:"creationDate,omitempty"`
}

type EPC string

type DocumentIdentificationIntf interface {
	_xDocumentIdentification()
}

type DocumentIdentification struct {
	DocumentIdentificationIntf

	Standard string `xml:"Standard,omitempty" json:"Standard,omitempty"`

	TypeVersion string `xml:"TypeVersion,omitempty" json:"TypeVersion,omitempty"`

	InstanceIdentifier string `xml:"InstanceIdentifier,omitempty" json:"InstanceIdentifier,omitempty"`

	Type string `xml:"Type,omitempty" json:"Type,omitempty"`

	MultipleType bool `xml:"MultipleType,omitempty" json:"MultipleType,omitempty"`

	CreationDateAndTime soap.XSDDateTimeIntf `xml:"CreationDateAndTime,omitempty" json:"CreationDateAndTime,omitempty"`
}

type PartnerIntf interface {
	_xPartner()
}

type Partner struct {
	PartnerIntf

	Identifier *PartnerIdentificationIntf `xml:"Identifier,omitempty" json:"Identifier,omitempty"`

	ContactInformation []*ContactInformationIntf `xml:"ContactInformation,omitempty" json:"ContactInformation,omitempty"`
}

type PartnerIdentification string

type ContactInformationIntf interface {
	_xContactInformation()
}

type ContactInformation struct {
	ContactInformationIntf

	Contact string `xml:"Contact,omitempty" json:"Contact,omitempty"`

	EmailAddress string `xml:"EmailAddress,omitempty" json:"EmailAddress,omitempty"`

	FaxNumber string `xml:"FaxNumber,omitempty" json:"FaxNumber,omitempty"`

	TelephoneNumber string `xml:"TelephoneNumber,omitempty" json:"TelephoneNumber,omitempty"`

	ContactTypeIdentifier string `xml:"ContactTypeIdentifier,omitempty" json:"ContactTypeIdentifier,omitempty"`
}

type MimeTypeQualifierIntf interface {
	_xMimeTypeQualifier()
}

// The MIME type as defined by IANA. Please refer to
// http://www.iana.org/assignments/media-types/ for a list of types.
//

type MimeTypeQualifier string

type LanguageIntf interface {
	_xLanguage()
}

// ISO 639-2; 1998 representation of Language name. Refer to http://www.loc.gov/standards/iso639-2/iso639jac.html to get the latest version of the standard.
//

type Language string

type ManifestIntf interface {
	_xManifest()
}

type Manifest struct {
	ManifestIntf

	NumberOfItems int32 `xml:"NumberOfItems,omitempty" json:"NumberOfItems,omitempty"`

	ManifestItem []*ManifestItemIntf `xml:"ManifestItem,omitempty" json:"ManifestItem,omitempty"`
}

type ManifestItemIntf interface {
	_xManifestItem()
}

type ManifestItem struct {
	ManifestItemIntf

	MimeTypeQualifierCode *MimeTypeQualifierIntf `xml:"MimeTypeQualifierCode,omitempty" json:"MimeTypeQualifierCode,omitempty"`

	UniformResourceIdentifier AnyURIIntf `xml:"UniformResourceIdentifier,omitempty" json:"UniformResourceIdentifier,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	LanguageCode *LanguageIntf `xml:"LanguageCode,omitempty" json:"LanguageCode,omitempty"`
}

type TypeOfServiceTransactionIntf interface {
	_xTypeOfServiceTransaction()
}

type TypeOfServiceTransaction string

const (
	TypeOfServiceTransactionRequestingServiceTransaction TypeOfServiceTransaction = "RequestingServiceTransaction"

	TypeOfServiceTransactionRespondingServiceTransaction TypeOfServiceTransaction = "RespondingServiceTransaction"
)

type ScopeInformation AnyType

type BusinessScopeIntf interface {
	_xBusinessScope()
}

type BusinessScope struct {
	BusinessScopeIntf

	Scope []*ScopeIntf `xml:"Scope,omitempty" json:"Scope,omitempty"`
}

type ScopeIntf interface {
	_xScope()
}

type Scope struct {
	ScopeIntf

	ScopeInformation []*ScopeInformation `xml:"ScopeInformation,omitempty" json:"ScopeInformation,omitempty"`
}

type CorrelationInformationIntf interface {
	_xCorrelationInformation()
}

type CorrelationInformation struct {
	CorrelationInformationIntf

	RequestingDocumentCreationDateTime soap.XSDDateTimeIntf `xml:"RequestingDocumentCreationDateTime,omitempty" json:"RequestingDocumentCreationDateTime,omitempty"`

	RequestingDocumentInstanceIdentifier string `xml:"RequestingDocumentInstanceIdentifier,omitempty" json:"RequestingDocumentInstanceIdentifier,omitempty"`

	ExpectedResponseDateTime soap.XSDDateTimeIntf `xml:"ExpectedResponseDateTime,omitempty" json:"ExpectedResponseDateTime,omitempty"`
}

type BusinessServiceIntf interface {
	_xBusinessService()
}

type BusinessService struct {
	BusinessServiceIntf

	BusinessServiceName string `xml:"BusinessServiceName,omitempty" json:"BusinessServiceName,omitempty"`

	ServiceTransaction *ServiceTransactionIntf `xml:"ServiceTransaction,omitempty" json:"ServiceTransaction,omitempty"`
}

type ServiceTransactionIntf interface {
	_xServiceTransaction()
}

type ServiceTransaction struct {
	ServiceTransactionIntf

	TypeOfServiceTransaction *TypeOfServiceTransaction `xml:"TypeOfServiceTransaction,attr,omitempty" json:"TypeOfServiceTransaction,omitempty"`

	IsNonRepudiationRequired string `xml:"IsNonRepudiationRequired,attr,omitempty" json:"IsNonRepudiationRequired,omitempty"`

	IsAuthenticationRequired string `xml:"IsAuthenticationRequired,attr,omitempty" json:"IsAuthenticationRequired,omitempty"`

	IsNonRepudiationOfReceiptRequired string `xml:"IsNonRepudiationOfReceiptRequired,attr,omitempty" json:"IsNonRepudiationOfReceiptRequired,omitempty"`

	IsIntegrityCheckRequired string `xml:"IsIntegrityCheckRequired,attr,omitempty" json:"IsIntegrityCheckRequired,omitempty"`

	IsApplicationErrorResponseRequested string `xml:"IsApplicationErrorResponseRequested,attr,omitempty" json:"IsApplicationErrorResponseRequested,omitempty"`

	TimeToAcknowledgeReceipt string `xml:"TimeToAcknowledgeReceipt,attr,omitempty" json:"TimeToAcknowledgeReceipt,omitempty"`

	TimeToAcknowledgeAcceptance string `xml:"TimeToAcknowledgeAcceptance,attr,omitempty" json:"TimeToAcknowledgeAcceptance,omitempty"`

	TimeToPerform string `xml:"TimeToPerform,attr,omitempty" json:"TimeToPerform,omitempty"`

	Recurrence string `xml:"Recurrence,attr,omitempty" json:"Recurrence,omitempty"`
}

type StandardBusinessDocumentHeaderIntf interface {
	_xStandardBusinessDocumentHeader()
}

type StandardBusinessDocumentHeader struct {
	StandardBusinessDocumentHeaderIntf

	HeaderVersion string `xml:"HeaderVersion,omitempty" json:"HeaderVersion,omitempty"`

	Sender []*PartnerIntf `xml:"Sender,omitempty" json:"Sender,omitempty"`

	Receiver []*PartnerIntf `xml:"Receiver,omitempty" json:"Receiver,omitempty"`

	DocumentIdentification *DocumentIdentificationIntf `xml:"DocumentIdentification,omitempty" json:"DocumentIdentification,omitempty"`

	Manifest *ManifestIntf `xml:"Manifest,omitempty" json:"Manifest,omitempty"`

	BusinessScope *BusinessScopeIntf `xml:"BusinessScope,omitempty" json:"BusinessScope,omitempty"`
}

type StandardBusinessDocumentIntf interface {
	_xStandardBusinessDocument()
}

type StandardBusinessDocument struct {
	StandardBusinessDocumentIntf

	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ActionTypeIntf interface {
	_xActionType()
}

type ActionType string

const (
	ActionTypeADD ActionType = "ADD"

	ActionTypeOBSERVE ActionType = "OBSERVE"

	ActionTypeDELETE ActionType = "DELETE"
)

type ParentIDTypeIntf interface {
	_xParentIDType()
}

type ParentIDType AnyURI

type BusinessStepIDTypeIntf interface {
	_xBusinessStepIDType()
}

type BusinessStepIDType AnyURI

type DispositionIDTypeIntf interface {
	_xDispositionIDType()
}

type DispositionIDType AnyURI

type EPCClassTypeIntf interface {
	_xEPCClassType()
}

type EPCClassType AnyURI

type UOMTypeIntf interface {
	_xUOMType()
}

type UOMType string

type ReadPointIDTypeIntf interface {
	_xReadPointIDType()
}

type ReadPointIDType AnyURI

type BusinessLocationIDTypeIntf interface {
	_xBusinessLocationIDType()
}

type BusinessLocationIDType AnyURI

type BusinessTransactionIDTypeIntf interface {
	_xBusinessTransactionIDType()
}

type BusinessTransactionIDType AnyURI

type BusinessTransactionTypeIDTypeIntf interface {
	_xBusinessTransactionTypeIDType()
}

type BusinessTransactionTypeIDType AnyURI

type SourceDestIDTypeIntf interface {
	_xSourceDestIDType()
}

type SourceDestIDType AnyURI

type SourceDestTypeIDTypeIntf interface {
	_xSourceDestTypeIDType()
}

type SourceDestTypeIDType AnyURI

type TransformationIDTypeIntf interface {
	_xTransformationIDType()
}

type TransformationIDType AnyURI

type EventIDTypeIntf interface {
	_xEventIDType()
}

type EventIDType AnyURI

type ErrorReasonIDTypeIntf interface {
	_xErrorReasonIDType()
}

type ErrorReasonIDType AnyURI

type EPCISDocument EPCISDocumentType

type EPCISDocumentTypeIntf interface {
	_xEPCISDocumentType()
}

type EPCISDocumentType struct {
	EPCISDocumentTypeIntf

	XMLName xml.Name `xml:"urn:epcglobal:epcis:xsd:1 EPCISDocument"`

	*Document

	EPCISHeader *EPCISHeaderTypeIntf `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISBodyTypeIntf `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISDocumentExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISDocumentExtensionTypeIntf interface {
	_xEPCISDocumentExtensionType()
}

type EPCISDocumentExtensionType struct {
	EPCISDocumentExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderTypeIntf interface {
	_xEPCISHeaderType()
}

type EPCISHeaderType struct {
	EPCISHeaderTypeIntf

	StandardBusinessDocumentHeader *StandardBusinessDocumentHeader `xml:"StandardBusinessDocumentHeader,omitempty" json:"StandardBusinessDocumentHeader,omitempty"`

	Extension *EPCISHeaderExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISHeaderExtensionTypeIntf interface {
	_xEPCISHeaderExtensionType()
}

type EPCISHeaderExtensionType struct {
	EPCISHeaderExtensionTypeIntf

	EPCISMasterData *EPCISMasterDataTypeIntf `xml:"EPCISMasterData,omitempty" json:"EPCISMasterData,omitempty"`

	Extension *EPCISHeaderExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISHeaderExtension2TypeIntf interface {
	_xEPCISHeaderExtension2Type()
}

type EPCISHeaderExtension2Type struct {
	EPCISHeaderExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISMasterDataTypeIntf interface {
	_xEPCISMasterDataType()
}

type EPCISMasterDataType struct {
	EPCISMasterDataTypeIntf

	VocabularyList *VocabularyListTypeIntf `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`

	Extension *EPCISMasterDataExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISMasterDataExtensionTypeIntf interface {
	_xEPCISMasterDataExtensionType()
}

type EPCISMasterDataExtensionType struct {
	EPCISMasterDataExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyListTypeIntf interface {
	_xVocabularyListType()
}

type VocabularyListType struct {
	VocabularyListTypeIntf

	Vocabulary []*VocabularyTypeIntf `xml:"Vocabulary,omitempty" json:"Vocabulary,omitempty"`
}

type VocabularyTypeIntf interface {
	_xVocabularyType()
}

type VocabularyType struct {
	VocabularyTypeIntf

	VocabularyElementList *VocabularyElementListTypeIntf `xml:"VocabularyElementList,omitempty" json:"VocabularyElementList,omitempty"`

	Extension *VocabularyExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Type AnyURI `xml:"type,attr,omitempty" json:"type,omitempty"`
}

type VocabularyElementListTypeIntf interface {
	_xVocabularyElementListType()
}

type VocabularyElementListType struct {
	VocabularyElementListTypeIntf

	VocabularyElement []*VocabularyElementTypeIntf `xml:"VocabularyElement,omitempty" json:"VocabularyElement,omitempty"`
}

type VocabularyElementTypeIntf interface {
	_xVocabularyElementType()
}

type VocabularyElementType struct {
	VocabularyElementTypeIntf

	Attribute []*AttributeTypeIntf `xml:"attribute,omitempty" json:"attribute,omitempty"`

	Children *IDListTypeIntf `xml:"children,omitempty" json:"children,omitempty"`

	Extension *VocabularyElementExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	Id AnyURI `xml:"id,attr,omitempty" json:"id,omitempty"`
}

type AttributeTypeIntf interface {
	_xAttributeType()
}

type AttributeType struct {
	AttributeTypeIntf

	AnyType

	Id AnyURI `xml:"id,attr,omitempty" json:"id,omitempty"`
}

type IDListTypeIntf interface {
	_xIDListType()
}

type IDListType struct {
	IDListTypeIntf

	Id []AnyURIIntf `xml:"id,omitempty" json:"id,omitempty"`
}

type VocabularyExtensionTypeIntf interface {
	_xVocabularyExtensionType()
}

type VocabularyExtensionType struct {
	VocabularyExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type VocabularyElementExtensionTypeIntf interface {
	_xVocabularyElementExtensionType()
}

type VocabularyElementExtensionType struct {
	VocabularyElementExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyTypeIntf interface {
	_xEPCISBodyType()
}

type EPCISBodyType struct {
	EPCISBodyTypeIntf

	EventList *EventListTypeIntf `xml:"EventList,omitempty" json:"EventList,omitempty"`

	Extension *EPCISBodyExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISBodyExtensionTypeIntf interface {
	_xEPCISBodyExtensionType()
}

type EPCISBodyExtensionType struct {
	EPCISBodyExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EventListTypeIntf interface {
	_xEventListType()
}

type EventListType struct {
	EventListTypeIntf

	ObjectEvent []*ObjectEventTypeIntf `xml:"ObjectEvent,omitempty" json:"ObjectEvent,omitempty"`

	AggregationEvent []*AggregationEventTypeIntf `xml:"AggregationEvent,omitempty" json:"AggregationEvent,omitempty"`

	QuantityEvent []*QuantityEventTypeIntf `xml:"QuantityEvent,omitempty" json:"QuantityEvent,omitempty"`

	TransactionEvent []*TransactionEventTypeIntf `xml:"TransactionEvent,omitempty" json:"TransactionEvent,omitempty"`

	Extension *EPCISEventListExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtensionTypeIntf interface {
	_xEPCISEventListExtensionType()
}

type EPCISEventListExtensionType struct {
	EPCISEventListExtensionTypeIntf

	TransformationEvent *TransformationEventTypeIntf `xml:"TransformationEvent,omitempty" json:"TransformationEvent,omitempty"`

	Extension *EPCISEventListExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventListExtension2TypeIntf interface {
	_xEPCISEventListExtension2Type()
}

type EPCISEventListExtension2Type struct {
	EPCISEventListExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCListTypeIntf interface {
	_xEPCListType()
}

type EPCListType struct {
	EPCListTypeIntf

	Epc []*EPCIntf `xml:"epc,omitempty" json:"epc,omitempty"`
}

type QuantityElementTypeIntf interface {
	_xQuantityElementType()
}

type QuantityElementType struct {
	QuantityElementTypeIntf

	EpcClass *EPCClassTypeIntf `xml:"epcClass,omitempty" json:"epcClass,omitempty"`
}

type QuantityListTypeIntf interface {
	_xQuantityListType()
}

type QuantityListType struct {
	QuantityListTypeIntf

	QuantityElement []*QuantityElementTypeIntf `xml:"quantityElement,omitempty" json:"quantityElement,omitempty"`
}

type ReadPointTypeIntf interface {
	_xReadPointType()
}

type ReadPointType struct {
	ReadPointTypeIntf

	Id *ReadPointIDTypeIntf `xml:"id,omitempty" json:"id,omitempty"`

	Extension *ReadPointExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ReadPointExtensionTypeIntf interface {
	_xReadPointExtensionType()
}

type ReadPointExtensionType struct {
	ReadPointExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationTypeIntf interface {
	_xBusinessLocationType()
}

type BusinessLocationType struct {
	BusinessLocationTypeIntf

	Id *BusinessLocationIDTypeIntf `xml:"id,omitempty" json:"id,omitempty"`

	Extension *BusinessLocationExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessLocationExtensionTypeIntf interface {
	_xBusinessLocationExtensionType()
}

type BusinessLocationExtensionType struct {
	BusinessLocationExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type BusinessTransactionTypeIntf interface {
	_xBusinessTransactionType()
}

type BusinessTransactionType struct {
	BusinessTransactionTypeIntf

	Value *BusinessTransactionIDType `xml:",chardata" json:"-,"`

	Type *BusinessTransactionTypeIDType `xml:"type,attr,omitempty" json:"type,omitempty"`
}

type BusinessTransactionListTypeIntf interface {
	_xBusinessTransactionListType()
}

type BusinessTransactionListType struct {
	BusinessTransactionListTypeIntf

	BizTransaction []*BusinessTransactionTypeIntf `xml:"bizTransaction,omitempty" json:"bizTransaction,omitempty"`
}

type SourceDestTypeIntf interface {
	_xSourceDestType()
}

type SourceDestType struct {
	SourceDestTypeIntf

	Value *SourceDestIDType `xml:",chardata" json:"-,"`

	Type *SourceDestTypeIDType `xml:"type,attr,omitempty" json:"type,omitempty"`
}

type SourceListTypeIntf interface {
	_xSourceListType()
}

type SourceListType struct {
	SourceListTypeIntf

	Source []*SourceDestTypeIntf `xml:"source,omitempty" json:"source,omitempty"`
}

type DestinationListTypeIntf interface {
	_xDestinationListType()
}

type DestinationListType struct {
	DestinationListTypeIntf

	Destination []*SourceDestTypeIntf `xml:"destination,omitempty" json:"destination,omitempty"`
}

type ILMDTypeIntf interface {
	_xILMDType()
}

type ILMDType struct {
	ILMDTypeIntf

	Extension *ILMDExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ILMDExtensionTypeIntf interface {
	_xILMDExtensionType()
}

type ILMDExtensionType struct {
	ILMDExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type CorrectiveEventIDsTypeIntf interface {
	_xCorrectiveEventIDsType()
}

type CorrectiveEventIDsType struct {
	CorrectiveEventIDsTypeIntf

	CorrectiveEventID []*EventIDTypeIntf `xml:"correctiveEventID,omitempty" json:"correctiveEventID,omitempty"`
}

type ErrorDeclarationTypeIntf interface {
	_xErrorDeclarationType()
}

type ErrorDeclarationType struct {
	ErrorDeclarationTypeIntf

	DeclarationTime soap.XSDDateTimeIntf `xml:"declarationTime,omitempty" json:"declarationTime,omitempty"`

	Reason *ErrorReasonIDTypeIntf `xml:"reason,omitempty" json:"reason,omitempty"`

	CorrectiveEventIDs *CorrectiveEventIDsTypeIntf `xml:"correctiveEventIDs,omitempty" json:"correctiveEventIDs,omitempty"`

	Extension *ErrorDeclarationExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ErrorDeclarationExtensionTypeIntf interface {
	_xErrorDeclarationExtensionType()
}

type ErrorDeclarationExtensionType struct {
	ErrorDeclarationExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISEventTypeIntf interface {
	_xEPCISEventType()
}

type EPCISEventType struct {
	EPCISEventTypeIntf

	EventTime soap.XSDDateTimeIntf `xml:"eventTime,omitempty" json:"eventTime,omitempty"`

	RecordTime soap.XSDDateTimeIntf `xml:"recordTime,omitempty" json:"recordTime,omitempty"`

	EventTimeZoneOffset string `xml:"eventTimeZoneOffset,omitempty" json:"eventTimeZoneOffset,omitempty"`

	BaseExtension *EPCISEventExtensionTypeIntf `xml:"baseExtension,omitempty" json:"baseExtension,omitempty"`
}

type EPCISEventExtensionTypeIntf interface {
	_xEPCISEventExtensionType()
}

type EPCISEventExtensionType struct {
	EPCISEventExtensionTypeIntf

	EventID *EventIDTypeIntf `xml:"eventID,omitempty" json:"eventID,omitempty"`

	ErrorDeclaration *ErrorDeclarationTypeIntf `xml:"errorDeclaration,omitempty" json:"errorDeclaration,omitempty"`

	Extension *EPCISEventExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISEventExtension2TypeIntf interface {
	_xEPCISEventExtension2Type()
}

type EPCISEventExtension2Type struct {
	EPCISEventExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type ObjectEventTypeIntf interface {
	_xObjectEventType()
}

type ObjectEventType struct {
	ObjectEventTypeIntf

	*EPCISEventType

	EpcList *EPCListTypeIntf `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionTypeIntf `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDTypeIntf `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDTypeIntf `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointTypeIntf `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationTypeIntf `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListTypeIntf `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *ObjectEventExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtensionTypeIntf interface {
	_xObjectEventExtensionType()
}

type ObjectEventExtensionType struct {
	ObjectEventExtensionTypeIntf

	QuantityList *QuantityListTypeIntf `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListTypeIntf `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListTypeIntf `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDTypeIntf `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *ObjectEventExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type ObjectEventExtension2TypeIntf interface {
	_xObjectEventExtension2Type()
}

type ObjectEventExtension2Type struct {
	ObjectEventExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type AggregationEventTypeIntf interface {
	_xAggregationEventType()
}

type AggregationEventType struct {
	AggregationEventTypeIntf

	*EPCISEventType

	ParentID *ParentIDTypeIntf `xml:"parentID,omitempty" json:"parentID,omitempty"`

	ChildEPCs *EPCListTypeIntf `xml:"childEPCs,omitempty" json:"childEPCs,omitempty"`

	Action *ActionTypeIntf `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDTypeIntf `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDTypeIntf `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointTypeIntf `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationTypeIntf `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListTypeIntf `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *AggregationEventExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtensionTypeIntf interface {
	_xAggregationEventExtensionType()
}

type AggregationEventExtensionType struct {
	AggregationEventExtensionTypeIntf

	ChildQuantityList *QuantityListTypeIntf `xml:"childQuantityList,omitempty" json:"childQuantityList,omitempty"`

	SourceList *SourceListTypeIntf `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListTypeIntf `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *AggregationEventExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type AggregationEventExtension2TypeIntf interface {
	_xAggregationEventExtension2Type()
}

type AggregationEventExtension2Type struct {
	AggregationEventExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type QuantityEventTypeIntf interface {
	_xQuantityEventType()
}

type QuantityEventType struct {
	QuantityEventTypeIntf

	*EPCISEventType

	EpcClass *EPCClassTypeIntf `xml:"epcClass,omitempty" json:"epcClass,omitempty"`

	Quantity int32 `xml:"quantity,omitempty" json:"quantity,omitempty"`

	BizStep *BusinessStepIDTypeIntf `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDTypeIntf `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointTypeIntf `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationTypeIntf `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListTypeIntf `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	Extension *QuantityEventExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type QuantityEventExtensionTypeIntf interface {
	_xQuantityEventExtensionType()
}

type QuantityEventExtensionType struct {
	QuantityEventExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransactionEventTypeIntf interface {
	_xTransactionEventType()
}

type TransactionEventType struct {
	TransactionEventTypeIntf

	*EPCISEventType

	BizTransactionList *BusinessTransactionListTypeIntf `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	ParentID *ParentIDTypeIntf `xml:"parentID,omitempty" json:"parentID,omitempty"`

	EpcList *EPCListTypeIntf `xml:"epcList,omitempty" json:"epcList,omitempty"`

	Action *ActionTypeIntf `xml:"action,omitempty" json:"action,omitempty"`

	BizStep *BusinessStepIDTypeIntf `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDTypeIntf `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointTypeIntf `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationTypeIntf `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	Extension *TransactionEventExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtensionTypeIntf interface {
	_xTransactionEventExtensionType()
}

type TransactionEventExtensionType struct {
	TransactionEventExtensionTypeIntf

	QuantityList *QuantityListTypeIntf `xml:"quantityList,omitempty" json:"quantityList,omitempty"`

	SourceList *SourceListTypeIntf `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListTypeIntf `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Extension *TransactionEventExtension2TypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransactionEventExtension2TypeIntf interface {
	_xTransactionEventExtension2Type()
}

type TransactionEventExtension2Type struct {
	TransactionEventExtension2TypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type TransformationEventTypeIntf interface {
	_xTransformationEventType()
}

type TransformationEventType struct {
	TransformationEventTypeIntf

	*EPCISEventType

	InputEPCList *EPCListTypeIntf `xml:"inputEPCList,omitempty" json:"inputEPCList,omitempty"`

	InputQuantityList *QuantityListTypeIntf `xml:"inputQuantityList,omitempty" json:"inputQuantityList,omitempty"`

	OutputEPCList *EPCListTypeIntf `xml:"outputEPCList,omitempty" json:"outputEPCList,omitempty"`

	OutputQuantityList *QuantityListTypeIntf `xml:"outputQuantityList,omitempty" json:"outputQuantityList,omitempty"`

	TransformationID *TransformationIDTypeIntf `xml:"transformationID,omitempty" json:"transformationID,omitempty"`

	BizStep *BusinessStepIDTypeIntf `xml:"bizStep,omitempty" json:"bizStep,omitempty"`

	Disposition *DispositionIDTypeIntf `xml:"disposition,omitempty" json:"disposition,omitempty"`

	ReadPoint *ReadPointTypeIntf `xml:"readPoint,omitempty" json:"readPoint,omitempty"`

	BizLocation *BusinessLocationTypeIntf `xml:"bizLocation,omitempty" json:"bizLocation,omitempty"`

	BizTransactionList *BusinessTransactionListTypeIntf `xml:"bizTransactionList,omitempty" json:"bizTransactionList,omitempty"`

	SourceList *SourceListTypeIntf `xml:"sourceList,omitempty" json:"sourceList,omitempty"`

	DestinationList *DestinationListTypeIntf `xml:"destinationList,omitempty" json:"destinationList,omitempty"`

	Ilmd *ILMDTypeIntf `xml:"ilmd,omitempty" json:"ilmd,omitempty"`

	Extension *TransformationEventExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type TransformationEventExtensionTypeIntf interface {
	_xTransformationEventExtensionType()
}

type TransformationEventExtensionType struct {
	TransformationEventExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type ImplementationExceptionSeverityIntf interface {
	_xImplementationExceptionSeverity()
}

type ImplementationExceptionSeverity NCName

const (
	ImplementationExceptionSeverityERROR ImplementationExceptionSeverity = "ERROR"

	ImplementationExceptionSeveritySEVERE ImplementationExceptionSeverity = "SEVERE"
)

type EPCISQueryDocument EPCISQueryDocumentType

type GetQueryNames EmptyParms

type GetQueryNamesResult ArrayOfString

type SubscribeResult VoidHolder

type UnsubscribeResult VoidHolder

type GetSubscriptionIDsResult ArrayOfString

type GetStandardVersion EmptyParms

type GetStandardVersionResult string

type GetVendorVersion EmptyParms

type GetVendorVersionResult string

type EPCISQueryDocumentTypeIntf interface {
	_xEPCISQueryDocumentType()
}

type EPCISQueryDocumentType struct {
	EPCISQueryDocumentTypeIntf

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 EPCISQueryDocument"`

	*Document

	EPCISHeader *EPCISHeaderTypeIntf `xml:"EPCISHeader,omitempty" json:"EPCISHeader,omitempty"`

	EPCISBody *EPCISQueryBodyTypeIntf `xml:"EPCISBody,omitempty" json:"EPCISBody,omitempty"`

	Extension *EPCISQueryDocumentExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`
}

type EPCISQueryDocumentExtensionTypeIntf interface {
	_xEPCISQueryDocumentExtensionType()
}

type EPCISQueryDocumentExtensionType struct {
	EPCISQueryDocumentExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type EPCISQueryBodyTypeIntf interface {
	_xEPCISQueryBodyType()
}

type EPCISQueryBodyType struct {
	EPCISQueryBodyTypeIntf

	GetQueryNames *GetQueryNames `xml:"GetQueryNames,omitempty" json:"GetQueryNames,omitempty"`

	GetQueryNamesResult *GetQueryNamesResult `xml:"GetQueryNamesResult,omitempty" json:"GetQueryNamesResult,omitempty"`

	Subscribe *Subscribe `xml:"Subscribe,omitempty" json:"Subscribe,omitempty"`

	SubscribeResult *SubscribeResult `xml:"SubscribeResult,omitempty" json:"SubscribeResult,omitempty"`

	Unsubscribe *Unsubscribe `xml:"Unsubscribe,omitempty" json:"Unsubscribe,omitempty"`

	UnsubscribeResult *UnsubscribeResult `xml:"UnsubscribeResult,omitempty" json:"UnsubscribeResult,omitempty"`

	GetSubscriptionIDs *GetSubscriptionIDs `xml:"GetSubscriptionIDs,omitempty" json:"GetSubscriptionIDs,omitempty"`

	GetSubscriptionIDsResult *GetSubscriptionIDsResult `xml:"GetSubscriptionIDsResult,omitempty" json:"GetSubscriptionIDsResult,omitempty"`

	Poll *Poll `xml:"Poll,omitempty" json:"Poll,omitempty"`

	GetStandardVersion *GetStandardVersion `xml:"GetStandardVersion,omitempty" json:"GetStandardVersion,omitempty"`

	GetStandardVersionResult *GetStandardVersionResult `xml:"GetStandardVersionResult,omitempty" json:"GetStandardVersionResult,omitempty"`

	GetVendorVersion *GetVendorVersion `xml:"GetVendorVersion,omitempty" json:"GetVendorVersion,omitempty"`

	GetVendorVersionResult *GetVendorVersionResult `xml:"GetVendorVersionResult,omitempty" json:"GetVendorVersionResult,omitempty"`

	DuplicateNameException *DuplicateNameException `xml:"DuplicateNameException,omitempty" json:"DuplicateNameException,omitempty"`

	InvalidURIException *InvalidURIException `xml:"InvalidURIException,omitempty" json:"InvalidURIException,omitempty"`

	NoSuchNameException *NoSuchNameException `xml:"NoSuchNameException,omitempty" json:"NoSuchNameException,omitempty"`

	NoSuchSubscriptionException *NoSuchSubscriptionException `xml:"NoSuchSubscriptionException,omitempty" json:"NoSuchSubscriptionException,omitempty"`

	DuplicateSubscriptionException *DuplicateSubscriptionException `xml:"DuplicateSubscriptionException,omitempty" json:"DuplicateSubscriptionException,omitempty"`

	QueryParameterException *QueryParameterException `xml:"QueryParameterException,omitempty" json:"QueryParameterException,omitempty"`

	QueryTooLargeException *QueryTooLargeException `xml:"QueryTooLargeException,omitempty" json:"QueryTooLargeException,omitempty"`

	QueryTooComplexException *QueryTooComplexException `xml:"QueryTooComplexException,omitempty" json:"QueryTooComplexException,omitempty"`

	SubscriptionControlsException *SubscriptionControlsException `xml:"SubscriptionControlsException,omitempty" json:"SubscriptionControlsException,omitempty"`

	SubscribeNotPermittedException *SubscribeNotPermittedException `xml:"SubscribeNotPermittedException,omitempty" json:"SubscribeNotPermittedException,omitempty"`

	SecurityException *SecurityException `xml:"SecurityException,omitempty" json:"SecurityException,omitempty"`

	ValidationException *ValidationException `xml:"ValidationException,omitempty" json:"ValidationException,omitempty"`

	ImplementationException *ImplementationException `xml:"ImplementationException,omitempty" json:"ImplementationException,omitempty"`

	QueryResults *QueryResults `xml:"QueryResults,omitempty" json:"QueryResults,omitempty"`
}

type SubscribeIntf interface {
	_xSubscribe()
}

type Subscribe struct {
	SubscribeIntf

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParamsIntf `xml:"params,omitempty" json:"params,omitempty"`

	Dest AnyURIIntf `xml:"dest,omitempty" json:"dest,omitempty"`

	Controls *SubscriptionControlsIntf `xml:"controls,omitempty" json:"controls,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type UnsubscribeIntf interface {
	_xUnsubscribe()
}

type Unsubscribe struct {
	UnsubscribeIntf

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type GetSubscriptionIDsIntf interface {
	_xGetSubscriptionIDs()
}

type GetSubscriptionIDs struct {
	GetSubscriptionIDsIntf

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`
}

type PollIntf interface {
	_xPoll()
}

type Poll struct {
	PollIntf

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	Params *QueryParamsIntf `xml:"params,omitempty" json:"params,omitempty"`
}

type VoidHolderIntf interface {
	_xVoidHolder()
}

type VoidHolder struct {
	VoidHolderIntf

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 SubscribeResult"`
}

type EmptyParmsIntf interface {
	_xEmptyParms()
}

type EmptyParms struct {
	EmptyParmsIntf

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 GetQueryNames"`
}

type ArrayOfStringIntf interface {
	_xArrayOfString()
}

type ArrayOfString struct {
	ArrayOfStringIntf

	XMLName xml.Name `xml:"urn:epcglobal:epcis-query:xsd:1 GetQueryNamesResult"`

	Astring []string `xml:"string,omitempty" json:"string,omitempty"`
}

type SubscriptionControlsIntf interface {
	_xSubscriptionControls()
}

type SubscriptionControls struct {
	SubscriptionControlsIntf

	Schedule *QueryScheduleIntf `xml:"schedule,omitempty" json:"schedule,omitempty"`

	Trigger AnyURIIntf `xml:"trigger,omitempty" json:"trigger,omitempty"`

	InitialRecordTime soap.XSDDateTimeIntf `xml:"initialRecordTime,omitempty" json:"initialRecordTime,omitempty"`

	ReportIfEmpty bool `xml:"reportIfEmpty,omitempty" json:"reportIfEmpty,omitempty"`

	Extension *SubscriptionControlsExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type SubscriptionControlsExtensionTypeIntf interface {
	_xSubscriptionControlsExtensionType()
}

type SubscriptionControlsExtensionType struct {
	SubscriptionControlsExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryScheduleIntf interface {
	_xQuerySchedule()
}

type QuerySchedule struct {
	QueryScheduleIntf

	Second string `xml:"second,omitempty" json:"second,omitempty"`

	Minute string `xml:"minute,omitempty" json:"minute,omitempty"`

	Hour string `xml:"hour,omitempty" json:"hour,omitempty"`

	DayOfMonth string `xml:"dayOfMonth,omitempty" json:"dayOfMonth,omitempty"`

	Month string `xml:"month,omitempty" json:"month,omitempty"`

	DayOfWeek string `xml:"dayOfWeek,omitempty" json:"dayOfWeek,omitempty"`

	Extension *QueryScheduleExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryScheduleExtensionTypeIntf interface {
	_xQueryScheduleExtensionType()
}

type QueryScheduleExtensionType struct {
	QueryScheduleExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryParamsIntf interface {
	_xQueryParams()
}

type QueryParams struct {
	QueryParamsIntf

	Param []*QueryParamIntf `xml:"param,omitempty" json:"param,omitempty"`
}

type QueryParamIntf interface {
	_xQueryParam()
}

type QueryParam struct {
	QueryParamIntf

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value AnyTypeIntf `xml:"value,omitempty" json:"value,omitempty"`
}

type QueryResultsIntf interface {
	_xQueryResults()
}

type QueryResults struct {
	QueryResultsIntf

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`

	ResultsBody *QueryResultsBodyIntf `xml:"resultsBody,omitempty" json:"resultsBody,omitempty"`

	Extension *QueryResultsExtensionTypeIntf `xml:"extension,omitempty" json:"extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsExtensionTypeIntf interface {
	_xQueryResultsExtensionType()
}

type QueryResultsExtensionType struct {
	QueryResultsExtensionTypeIntf

	Items []string `xml:",any" json:"items,omitempty"`
}

type QueryResultsBodyIntf interface {
	_xQueryResultsBody()
}

type QueryResultsBody struct {
	QueryResultsBodyIntf

	EventList *EventListTypeIntf `xml:"EventList,omitempty" json:"EventList,omitempty"`

	VocabularyList *VocabularyListTypeIntf `xml:"VocabularyList,omitempty" json:"VocabularyList,omitempty"`
}

type EPCISExceptionIntf interface {
	_xEPCISException()
}

type EPCISException struct {
	EPCISExceptionIntf

	Reason string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DuplicateNameExceptionIntf interface {
	_xDuplicateNameException()
}

type DuplicateNameException struct {
	DuplicateNameExceptionIntf

	*EPCISException
}

type InvalidURIExceptionIntf interface {
	_xInvalidURIException()
}

type InvalidURIException struct {
	InvalidURIExceptionIntf

	*EPCISException
}

type NoSuchNameExceptionIntf interface {
	_xNoSuchNameException()
}

type NoSuchNameException struct {
	NoSuchNameExceptionIntf

	*EPCISException
}

type NoSuchSubscriptionExceptionIntf interface {
	_xNoSuchSubscriptionException()
}

type NoSuchSubscriptionException struct {
	NoSuchSubscriptionExceptionIntf

	*EPCISException
}

type DuplicateSubscriptionExceptionIntf interface {
	_xDuplicateSubscriptionException()
}

type DuplicateSubscriptionException struct {
	DuplicateSubscriptionExceptionIntf

	*EPCISException
}

type QueryParameterExceptionIntf interface {
	_xQueryParameterException()
}

type QueryParameterException struct {
	QueryParameterExceptionIntf

	*EPCISException
}

type QueryTooLargeExceptionIntf interface {
	_xQueryTooLargeException()
}

type QueryTooLargeException struct {
	QueryTooLargeExceptionIntf

	*EPCISException

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type QueryTooComplexExceptionIntf interface {
	_xQueryTooComplexException()
}

type QueryTooComplexException struct {
	QueryTooComplexExceptionIntf

	*EPCISException
}

type SubscriptionControlsExceptionIntf interface {
	_xSubscriptionControlsException()
}

type SubscriptionControlsException struct {
	SubscriptionControlsExceptionIntf

	*EPCISException
}

type SubscribeNotPermittedExceptionIntf interface {
	_xSubscribeNotPermittedException()
}

type SubscribeNotPermittedException struct {
	SubscribeNotPermittedExceptionIntf

	*EPCISException
}

type SecurityExceptionIntf interface {
	_xSecurityException()
}

type SecurityException struct {
	SecurityExceptionIntf

	*EPCISException
}

type ValidationExceptionIntf interface {
	_xValidationException()
}

type ValidationException struct {
	ValidationExceptionIntf

	*EPCISException
}

type ImplementationExceptionIntf interface {
	_xImplementationException()
}

type ImplementationException struct {
	ImplementationExceptionIntf

	*EPCISException

	Severity *ImplementationExceptionSeverityIntf `xml:"severity,omitempty" json:"severity,omitempty"`

	QueryName string `xml:"queryName,omitempty" json:"queryName,omitempty"`

	SubscriptionID string `xml:"subscriptionID,omitempty" json:"subscriptionID,omitempty"`
}

type EPCISServicePortType interface {

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetQueryNames(request *EmptyParms) (*ArrayOfString, error)

	GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - InvalidURIExceptionFault
	//   - DuplicateSubscriptionExceptionFault
	//   - QueryParameterExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - SubscriptionControlsExceptionFault
	//   - SubscribeNotPermittedExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Subscribe(request *Subscribe) (*VoidHolder, error)

	SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchSubscriptionExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Unsubscribe(request *Unsubscribe) (*VoidHolder, error)

	UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error)

	// Error can be either of the following types:
	//
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error)

	GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error)

	// Error can be either of the following types:
	//
	//   - QueryParameterExceptionFault
	//   - QueryTooLargeExceptionFault
	//   - QueryTooComplexExceptionFault
	//   - NoSuchNameExceptionFault
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	Poll(request *Poll) (*QueryResults, error)

	PollContext(ctx context.Context, request *Poll) (*QueryResults, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetStandardVersion(request *EmptyParms) (*string, error)

	GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error)

	// Error can be either of the following types:
	//
	//   - SecurityExceptionFault
	//   - ValidationExceptionFault
	//   - ImplementationExceptionFault

	GetVendorVersion(request *EmptyParms) (*string, error)

	GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error)
}

type ePCISServicePortType struct {
	client *soap.Client
}

func NewEPCISServicePortType(client *soap.Client) EPCISServicePortType {
	return &ePCISServicePortType{
		client: client,
	}
}

func (service *ePCISServicePortType) GetQueryNamesContext(ctx context.Context, request *EmptyParms) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetQueryNames(request *EmptyParms) (*ArrayOfString, error) {
	return service.GetQueryNamesContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) SubscribeContext(ctx context.Context, request *Subscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Subscribe(request *Subscribe) (*VoidHolder, error) {
	return service.SubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) UnsubscribeContext(ctx context.Context, request *Unsubscribe) (*VoidHolder, error) {
	response := new(VoidHolder)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Unsubscribe(request *Unsubscribe) (*VoidHolder, error) {
	return service.UnsubscribeContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetSubscriptionIDsContext(ctx context.Context, request *GetSubscriptionIDs) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetSubscriptionIDs(request *GetSubscriptionIDs) (*ArrayOfString, error) {
	return service.GetSubscriptionIDsContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) PollContext(ctx context.Context, request *Poll) (*QueryResults, error) {
	response := new(QueryResults)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) Poll(request *Poll) (*QueryResults, error) {
	return service.PollContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetStandardVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetStandardVersion(request *EmptyParms) (*string, error) {
	return service.GetStandardVersionContext(
		context.Background(),
		request,
	)
}

func (service *ePCISServicePortType) GetVendorVersionContext(ctx context.Context, request *EmptyParms) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ePCISServicePortType) GetVendorVersion(request *EmptyParms) (*string, error) {
	return service.GetVendorVersionContext(
		context.Background(),
		request,
	)
}
